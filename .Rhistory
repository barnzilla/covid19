sheet = "input")
init <- as.integer(input_stuff$VALUE)
names(init) <- input_stuff$NAME
nSim <- nrow(time_stuff)
#################################################################################################
#########################################333333
#
# SEIR Model
#
seir <- function(time, state, parms) {
with(as.list(c(state, parms)), {
dS <- -beta*((c*(1-lambda)*tau)+(cq*lambda)+(cr*(1-lambda)*(1-tau)))*S*(I_a + I_aqn + I_sm + I_ss + I_smisn + I_ssisn+I_ar+I_smr+I_ssr+I_smrisn+I_ssrisn+phi*I_aq)
dL <- (1-lambda)*beta*c*tau*S*(I_a + I_aqn + I_sm + I_ss + I_smisn + I_ssisn+I_ar+I_smr+I_ssr+I_smrisn+I_ssrisn+phi*I_aq) - sigma*L
dL_q <- lambda*beta*cq*S*(I_a + I_aqn + I_sm + I_ss + I_smisn + I_ssisn+I_ar+I_smr+I_ssr+I_smrisn+I_ssrisn+phi*I_aq) - sigma*L_q
dL_r <-  beta*cr*(1-lambda)*(1-tau)*S*(I_a + I_aqn + I_sm + I_ss + I_smisn + I_ssisn+I_ar+I_smr+I_ssr+I_smrisn+I_ssrisn+phi*I_aq)-sigma*L_r
dI_a <- sigma*L - I_a*delta*epsilon - I_a*(1-delta)*upsilon
dI_aq <- sigma*rho*L_q - I_aq*delta*epsilonq - I_aq*(1-delta)*upsilon
# dI_aq <- sigma*rho*L_q - I_aq*delta*epsilon - I_aq*(1-delta)*upsilon
dI_ar <- sigma*L_r - I_ar*delta*epsilon - I_ar*(1-delta)*upsilon
dI_aqn <- sigma*(1-rho)*L_q - I_aqn*delta*epsilon - I_aqn*(1-delta)*upsilon
#dI_sm <- (I_a)*delta*epsilon*alpha - kappa*I_sm
dI_sm <- (I_a+I_aqn)*delta*epsilon*alpha - kappa*I_sm
#dI_ss <- I_a*delta*epsilon*(1-alpha) - kappa*I_ss
dI_ss <- (I_a+I_aqn)*delta*epsilon*(1-alpha) - kappa*I_ss
dI_smr <- I_ar*delta*epsilon*alpha - kappa*I_smr
dI_ssr <- I_ar*delta*epsilon*(1-alpha) - kappa*I_ssr
dI_smis <- kappa*feim*I_sm + kappa*feimr*I_smr + delta*alpha*epsilonq*feimq*I_aq - num*I_smis
dI_smisn <- kappa*(1-feim)*I_sm - num*I_smisn
dI_ssis <- kappa*feisi*(I_ss+I_ssr) - I_ssis*((1-mu)*nus + mu*nud)
#dI_ssisn <- kappa*(1-feisi-feish)*(I_ss+I_ssr) - I_ssisn*((1-mu)*nus + mu*nud)
dI_ssisn <- kappa*(1-feisi-feish)*(I_ss) - I_ssisn*((1-mu)*nus + mu*nud)
dI_ssh <- kappa*feish*(I_ss+I_ssr) + delta*(1-alpha)*epsilonq*I_aq - I_ssh*((1-mu)*nus + mu*nud)
dI_smrisn <- kappa*(1-feimr)*I_smr - num*I_smrisn
dI_ssrisn <- kappa*(1-feisi-feish)*(I_ssr) - I_ssrisn*((1-mu)*nus + mu*nud)
dI_smqisn <- I_aq*delta*alpha*epsilonq*(1-feimq) - num*I_smqisn
dR <- (I_a +I_aq+I_aqn+I_ar)*(1-delta)*upsilon + num*(I_smis+I_smisn+I_smqisn+I_smrisn) + (I_ssis + I_ssisn + I_ssh+I_ssrisn)*(1-mu)*nus
dD <- mu*nud*(I_ssis + I_ssisn + I_ssh + I_ssrisn)
return(list(c(dS, dL, dL_q, dL_r, dI_a, dI_aq, dI_ar, dI_aqn, dI_sm, dI_ss,dI_smr, dI_ssr, dI_smis, dI_smisn, dI_ssis, dI_ssisn, dI_ssh, dI_smrisn, dI_ssrisn, dI_smqisn, dR, dD)))  })
}#
# ### Set time frame in days
#################################################################################################
# Simulation
# Create list to store model output
listOut <- NULL
listOut <- list()
i=1
for(i in seq(1, nSim, 1)){
### Set time frame in days
t <- seq(0, time_stuff$t_n[i], by = 1)
curr_param <- all_param %>% filter(isim == i)
params <- curr_param$value
names(params) <- curr_param$name
##########################################
#
#
# This is an example of how to dynamically set params based on conditions for SEIR state
# It is not elegant and it will override the input file but it should work
#
#print(paste0("i = ", i))
#print(paste0("beta First = ", params[names(params) == "beta"]))
# *********************************************
#    ***** EXAMPLE DYNAMIC VARIABLES ****
#params[names(params) == "beta"]  <- 0.05 / init[names(init) == "S"]
#print(paste0("beta after = ", params[names(params) == "beta"]))
#####################################
#all(params == old_params)
#all(names(params) == names(old_params))
#all(init == old_init)
#all(names(init) == names(old_init))
#all(t == old_t)
### Run the model
out <- ode(y = init,
times = t,
func = seir,
parms = params
)
#rowSums(out) %>% plot()
out <- out %>%
as_tibble() #%>% mutate_all(.funs = as.integer)
out %>% write.csv(paste0(LOG_FILE_BASE_NAME,"_i-" ,i, ".csv"))
out <- out #%>% mutate_all(as.integer)
out$time <- seq(time_stuff$tmin[i], time_stuff$tmax[i], 1)
# Add model output to list
listOut[[i]] <- out
out_for_init <-
out %>%
slice(nrow(out)) %>%
pivot_longer(-time)
#init <- as.integer(out_for_init$value)
init <-out_for_init$value
names(init) <- out_for_init$name
}
big_out <- bind_rows(listOut) %>% distinct()
big_out %>% write.csv(paste0(LOG_FILE_BASE_NAME,"_big_out-" ,i, ".csv"))
big_out$L_tot <- big_out %>% select_at(vars(starts_with("L"))) %>% rowSums()
big_out$I_tot <- big_out %>% select_at(vars(starts_with("I"))) %>% rowSums()
#MOST THat Leave L
max(big_out$L_tot * params[names(params) == "sigma"] )
#####################3
# All that leave L
sum(big_out$L_tot * params[names(params) == "sigma"] )
big_out %>% mutate(I_old = lag(I_tot))
#############################################
# MAKE PRETTY PICTURES
# Time lines graph
df_p <-
big_out %>%
select(time, S, L_tot, I_tot, R, D) %>%
rename( susceptible := S, Latent := L_tot, Infected = I_tot, Recovered = R, Dead = D) %>%
pivot_longer(-time)
df_p_l <-df_p %>% group_by(name) %>% summarise(max_value =max(value),
min_value =min(value),
)
df_p_l$time <- 750
df_p_l <- df_p_l %>% mutate(value = (max_value - min_value) + min_value)
df_p_l <- df_p_l %>% filter(name == "susceptible")
#big_out %>% slice(which.max(I_tot))
df_p %>%
ggplot(aes(x = time, color = name, y = value)) +
geom_point() +
#  geom_label(data = df_p_l, mapping = aes(label = as.character(max_value))) +
facet_grid(rows = vars(name), scales = "free_y") +
labs(title = "Covid-19 - SEIR Model Results", x = "Time [days]", y = "Counts" )
################################ HAVE NOT TESTED PAST HERE ###############################33
#timeout
#out$time
#out[[, "time"]]
#plot(out$S)
#################################################################################################
# Plot the results
## Plot
#plotdata <- data.frame(x=t, y=big_out)
#
#matplot(x = plotdata[,c("y.time")], y = plotdata[,c("y.S","y.L","y.L_q","y.I_a","y.I_aq","y.I_smis","y.I_ssh","y.R",'y.D')], type = "l",
#xlab = "Time", ylab = "individuals", main = "SEIR Model 2.0",
#lwd = 1, lty = 1, bty = "l", col = 2:11)
#legend(250, 1000000, c("Susceptible", "Latent","Latent_q",  "Pre-sympt", 'Pre-sympto in quarantine','Symptomatic mild isolated','Symptomatic severe hospitalized','Recovered','Dead'), pch = 1, col = 2:11, bty = "n")
###################################################################################
##Calculate ouputs#######################
#############################################
### Number of infected over time
################################
matplot(x = big_out[,c("time")], y = big_out[,c('I_tot')], type = "l",
xlab = "Time", ylab = "individuals", main = "Infected",
lwd = 2, lty = 1, bty = "l", col = 2)
# Max number of cases and date of peak
maxInfect<-max(big_out$I_tot)
maxInfect
datemaxInfect<-big_out$time[big_out$I_tot==max(big_out$I_tot)]
datemaxInfect
### Number of new cases each day, over time (incidence)
#######################################################
n<-nrow(big_out)
#Calculate the incidence
# Incidents
big_out$IncI <-NA
big_out$IncI[1]<-big_out$I_tot[1]
for(i in 2:nrow(big_out))
big_out$IncI[i] <-
(big_out$L_tot[i-1]) *
(curr_param$value[curr_param$name=='sigma'])
sum(big_out$IncI)
#Calculate the incidence max and the related date
maxInc<-max(big_out$IncI)
maxInc
datemaxInc<-big_out$time[big_out$IncI==max(big_out$IncI)]
datemaxInc
# Total number of cases
sumInfect<-sum(big_out$IncI)
sumInfect
#sum(big_out$L_tot * params[names(params) == "sigma"] )
# Outbreak duration (when no new cases)
big_out$cumI<-NA
big_out$cumI[1]<-big_out$IncI[1]
for(i in 2:n)
big_out$cumI[i] <- (big_out$IncI[i] +big_out$cumI[i-1])
matplot(x = big_out[,c("time")], y = big_out[,c('cumI')], type = "l",
xlab = "Time", ylab = "individuals", main = "Cumulative incidence",
lwd = 2, lty = 1, bty = "l", col = 6)
datemaxCumI<-big_out$time[big_out$cumI==max(big_out$cumI)]
min(datemaxCumI)
# Attack rate
AR <- sumInfect*100/(37600000+200)
AR
### Hospitalized
big_out$Hosp <- big_out$I_ssh
matplot(x = big_out[,c("time")], y = big_out[,c('Hosp')], type = "l",
xlab = "Time", ylab = "individuals", main = "Hospitalized",
lwd = 2, lty = 1, bty = "l", col = 3)
maxHosp<-max(big_out$Hosp)
maxHosp<-max(big_out$I_ssh)
maxHosp
datemaxHosp<-big_out$time[big_out$Hosp==max(big_out$Hosp)]
datemaxHosp
#total number of hopitalized
big_out$newH<-NA
big_out$newH[1]<-big_out$I_ssh[1]
for(i in 2:300)
big_out$newH[i] <-
(
big_out$I_ss[i-1] + big_out$I_ssr[i-1])*
(curr_param$value[curr_param$name=='kappa'])*
(curr_param$value[curr_param$name=='feish']) +
(curr_param$value[curr_param$name=='delta'])*
(1-curr_param$value[curr_param$name=='alpha'])*
(curr_param$value[curr_param$name=='epsilonq'])*
big_out$I_aq[i-1]
big_out$I_ssh %>% plot()
sum(big_out$newH, na.rm = T)
big_out$newH2<-NA
big_out$newH2[1]<-big_out$I_ssh[1]
for(i in 2:300){
big_out$newH2[i]<-big_out$I_ssh[i-1]*
((1-(curr_param$value[curr_param$name=='mu']))*
(curr_param$value[curr_param$name=='nus']) +
(curr_param$value[curr_param$name=='mu'])*
(curr_param$value[curr_param$name=='nud']))
}
sum(big_out$newH2, na.rm = T)
sum(big_out$newH2, na.rm = T)/sum(big_out$IncI)
#######Number of death
max(big_out$D)
#### Quarantined
big_out$Quarant <- big_out$I_aq
matplot(x = big_out[,c("time")], y = big_out[,c('Quarant')], type = "l",
xlab = "Time", ylab = "individuals", main = "Quarantined",
lwd = 2, lty = 1, bty = "l", col = 4)
#legend(250, 1000000, c("Hospitalized"), pch = 1, col = 3, bty = "n")
maxQuarant<-max(big_out$Quarant)
maxQuarant
datemaxQuarant<-big_out$time[big_out$Quarant==max(big_out$Quarant)]
datemaxQuarant
##### Isolated
big_out$Isolat <- big_out$I_smis + big_out$I_ssis
matplot(x = big_out[,c("time")], y = big_out[,c('Isolat')], type = "l",
xlab = "Time", ylab = "individuals", main = "Isolated",
lwd = 2, lty = 1, bty = "l", col = 5)
maxIsolat<-max(big_out$Isolat)
maxIsolat
datemaxIsolat<-big_out$time[big_out$Isolat==max(big_out$Isolat)]
datemaxIsolat
# dI <- sigma*rho*L - (delta_I*(1-omega) +  gamma_I*omega)*I + mu*epsilon*A
# dA <- sigma*(1 - rho)*L - (1-epsilon)*gamma_A*A - mu*epsilon*A
###################################################################################################
epsilon  <-params['epsilon']
LOG_FILE_BASE_NAME = paste0("SEIR_LOG_", Sys.Date())
time_param_names <-
time_stuff %>%
select(-tmin, -tmax) %>%
colnames()
#################################################################################################
### User input for the initial conditions
time_stuff <- read_excel("c:/users/joel/google drive/github/seir/input_sheet_5agegrp.xls",
sheet = "time")
time_param_names <-
time_stuff %>%
select(-tmin, -tmax) %>%
colnames()
warnings()
time_stuff <- time_stuff %>%
mutate(t_n = tmax - tmin) %>%
mutate(., isim = 1:nrow(.))
all_param <- time_stuff %>% pivot_longer(cols = time_param_names)
input_stuff <- read_excel("c:/users/joel/google drive/github/seir/input_sheet_5agegrp.xls",
sheet = "input")
init <- as.integer(input_stuff$VALUE)
names(init) <- input_stuff$NAME
nSim <- nrow(time_stuff)
init <- as.integer(input_stuff$VALUE)
library(deSolve)
library(ggplot2)
library(tidyr)
library(dplyr)
library(tidyverse)
library(matrixStats)
library(readxl)
library(janitor)
LOG_FILE_BASE_NAME = paste0("SEIR_LOG_", Sys.Date())
#################################################################################################
### User input for the initial conditions
time_stuff <- read_excel("c:/users/joel/desktop/phac/input_sheet SC3 beta0.167.xlsx",
sheet = "time")
time_param_names <-
time_stuff %>%
select(-tmin, -tmax) %>%
colnames()
time_stuff <- time_stuff %>%
mutate(t_n = tmax - tmin) %>%
mutate(., isim = 1:nrow(.))
all_param <- time_stuff %>% pivot_longer(cols = time_param_names)
input_stuff <- read_excel("c:/users/joel/desktop/phac/input_sheet SC3 beta0.167.xlsx",
sheet = "input")
init <- as.integer(input_stuff$VALUE)
names(init) <- input_stuff$NAME
nSim <- nrow(time_stuff)
seir <- function(time, state, parms) {
with(as.list(c(state, parms)), {
dS <- -beta*((c*(1-lambda)*tau)+(cq*lambda)+(cr*(1-lambda)*(1-tau)))*S*(I_a + I_aqn + I_sm + I_ss + I_smisn + I_ssisn+I_ar+I_smr+I_ssr+I_smrisn+I_ssrisn+phi*I_aq)
dL <- (1-lambda)*beta*c*tau*S*(I_a + I_aqn + I_sm + I_ss + I_smisn + I_ssisn+I_ar+I_smr+I_ssr+I_smrisn+I_ssrisn+phi*I_aq) - sigma*L
dL_q <- lambda*beta*cq*S*(I_a + I_aqn + I_sm + I_ss + I_smisn + I_ssisn+I_ar+I_smr+I_ssr+I_smrisn+I_ssrisn+phi*I_aq) - sigma*L_q
dL_r <-  beta*cr*(1-lambda)*(1-tau)*S*(I_a + I_aqn + I_sm + I_ss + I_smisn + I_ssisn+I_ar+I_smr+I_ssr+I_smrisn+I_ssrisn+phi*I_aq)-sigma*L_r
dI_a <- sigma*L - I_a*delta*epsilon - I_a*(1-delta)*upsilon
dI_aq <- sigma*rho*L_q - I_aq*delta*epsilonq - I_aq*(1-delta)*upsilon
# dI_aq <- sigma*rho*L_q - I_aq*delta*epsilon - I_aq*(1-delta)*upsilon
dI_ar <- sigma*L_r - I_ar*delta*epsilon - I_ar*(1-delta)*upsilon
dI_aqn <- sigma*(1-rho)*L_q - I_aqn*delta*epsilon - I_aqn*(1-delta)*upsilon
#dI_sm <- (I_a)*delta*epsilon*alpha - kappa*I_sm
dI_sm <- (I_a+I_aqn)*delta*epsilon*alpha - kappa*I_sm
#dI_ss <- I_a*delta*epsilon*(1-alpha) - kappa*I_ss
dI_ss <- (I_a+I_aqn)*delta*epsilon*(1-alpha) - kappa*I_ss
dI_smr <- I_ar*delta*epsilon*alpha - kappa*I_smr
dI_ssr <- I_ar*delta*epsilon*(1-alpha) - kappa*I_ssr
dI_smis <- kappa*feim*I_sm + kappa*feimr*I_smr + delta*alpha*epsilonq*feimq*I_aq - num*I_smis
dI_smisn <- kappa*(1-feim)*I_sm - num*I_smisn
dI_ssis <- kappa*feisi*(I_ss+I_ssr) - I_ssis*((1-mu)*nus + mu*nud)
#dI_ssisn <- kappa*(1-feisi-feish)*(I_ss+I_ssr) - I_ssisn*((1-mu)*nus + mu*nud)
dI_ssisn <- kappa*(1-feisi-feish)*(I_ss) - I_ssisn*((1-mu)*nus + mu*nud)
dI_ssh <- kappa*feish*(I_ss+I_ssr) + delta*(1-alpha)*epsilonq*I_aq - I_ssh*((1-mu)*nus + mu*nud)
dI_smrisn <- kappa*(1-feimr)*I_smr - num*I_smrisn
dI_ssrisn <- kappa*(1-feisi-feish)*(I_ssr) - I_ssrisn*((1-mu)*nus + mu*nud)
dI_smqisn <- I_aq*delta*alpha*epsilonq*(1-feimq) - num*I_smqisn
dR <- (I_a +I_aq+I_aqn+I_ar)*(1-delta)*upsilon + num*(I_smis+I_smisn+I_smqisn+I_smrisn) + (I_ssis + I_ssisn + I_ssh+I_ssrisn)*(1-mu)*nus
dD <- mu*nud*(I_ssis + I_ssisn + I_ssh + I_ssrisn)
return(list(c(dS, dL, dL_q, dL_r, dI_a, dI_aq, dI_ar, dI_aqn, dI_sm, dI_ss,dI_smr, dI_ssr, dI_smis, dI_smisn, dI_ssis, dI_ssisn, dI_ssh, dI_smrisn, dI_ssrisn, dI_smqisn, dR, dD)))  })
}#
#################################################################################################
# Simulation
# Create list to store model output
listOut <- NULL
listOut <- list()
i=1
for(i in seq(1, nSim, 1)){
### Set time frame in days
t <- seq(0, time_stuff$t_n[i], by = 1)
curr_param <- all_param %>% filter(isim == i)
params <- curr_param$value
names(params) <- curr_param$name
##########################################
#
#
# This is an example of how to dynamically set params based on conditions for SEIR state
# It is not elegant and it will override the input file but it should work
#
#print(paste0("i = ", i))
#print(paste0("beta First = ", params[names(params) == "beta"]))
# *********************************************
#    ***** EXAMPLE DYNAMIC VARIABLES ****
#params[names(params) == "beta"]  <- 0.05 / init[names(init) == "S"]
#print(paste0("beta after = ", params[names(params) == "beta"]))
#####################################
#all(params == old_params)
#all(names(params) == names(old_params))
#all(init == old_init)
#all(names(init) == names(old_init))
#all(t == old_t)
### Run the model
out <- ode(y = init,
times = t,
func = seir,
parms = params
)
#rowSums(out) %>% plot()
out <- out %>%
as_tibble() #%>% mutate_all(.funs = as.integer)
out %>% write.csv(paste0(LOG_FILE_BASE_NAME,"_i-" ,i, ".csv"))
out <- out #%>% mutate_all(as.integer)
out$time <- seq(time_stuff$tmin[i], time_stuff$tmax[i], 1)
# Add model output to list
listOut[[i]] <- out
out_for_init <-
out %>%
slice(nrow(out)) %>%
pivot_longer(-time)
#init <- as.integer(out_for_init$value)
init <-out_for_init$value
names(init) <- out_for_init$name
}
big_out <- bind_rows(listOut) %>% distinct()
big_out %>% write.csv(paste0(LOG_FILE_BASE_NAME,"_big_out-" ,i, ".csv"))
shiny::runApp('C:/Users/Joel/Google Drive/GitHub/SEIR')
runApp('C:/Users/Joel/Google Drive/GitHub/SEIR')
?all_of
runApp('C:/Users/Joel/Google Drive/GitHub/SEIR')
library(tidyselect)
runApp('C:/Users/Joel/Google Drive/GitHub/SEIR')
runApp('C:/Users/Joel/Google Drive/GitHub/SEIR')
library(abind)
detach("package:abind", unload = TRUE)
install.packages("tidyselect")
install.packages("tidyselect")
library(tidyselect)
install.packages("tidyselect")
library("tidyselect")
library(tidyverse)
remove.packages("tidyselect", lib="~/R/win-library/3.6")
install.packages("tidyselect")
install.packages("tidyselect")
library(tidyselect)
library("tidyselect")
# Load packages to extend base R
package_names <- c("janitor","readxl","dplyr","deSolve","tidyr","ggplot2", "ggpubr", "tidyverse", "shiny", "shinycssloaders", "DT", "scales", "plotly", "matrixcalc")
load_packages <- lapply(package_names, require, character.only = TRUE)
install.packages("C:/Users/Joel/Downloads/tidyselect_1.0.0.tar.gz", repos = NULL, type = "source")
library("tidyselect")
install.packages("tidyselect")
shiny::runApp('C:/Users/Joel/Desktop/demo')
runApp('C:/Users/Joel/Desktop/demo')
runApp('C:/Users/Joel/Desktop/demo')
runApp('C:/Users/Joel/Google Drive/GitHub/SEIR/robots_v4')
shiny::runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
list(a = tibble(a = 1:10, b = 1:10), b = tibble(a = 1:5, b = 1:5))
l = list(a = tibble(a = 1:10, b = 1:10), b = tibble(a = 1:5, b = 1:5))
l
as.data.frame(l)
str(as.data.frame(l))
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
shiny::runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
?textOutput
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
list.files(pattern = "^[^~]*.xlsx")
get_wd()
getwd()
setwd("c:/users/joel/google drive/github/covid19")
list.files(pattern = "^[^~]*.xlsx")
list.files(pattern = "^[^~][^T]*.xlsx")
list.files(pattern = "^[^~]^[^T]*.xlsx")
list.files(pattern = "^[^~]^[^-]*.xlsx")
list.files(pattern = "^[^~]^[^]*.xlsx")
list.files(pattern = "^[^~]^[^_]*.xlsx")
list.files(pattern = "^[^~]*.xlsx")
list.files(pattern = "^[^~|T]*.xlsx")
list.files(pattern = "^[^~|*]*.xlsx")
list.files(pattern = "^[^~|copy]*.xlsx")
list.files(pattern = "^[^~|--]*.xlsx")
list.files(pattern = "^[^~|+]*.xlsx")
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
list.files(pattern = "^[^~|+]*.xlsx")
files <- list.files(pattern = "^[^~|+]*.xlsx")
files
files <- sort(files, decreasing = TRUE)
files
files[length(files)]
all.equal(new_snapshot, read_xlsx(files[1]))
files[1]
a = read_xlsx("Table 13-10-0766-01 - updated 2020-04-28.xlsx")
b = read_xlsx("Table 13-10-0766-01 - updated 2020-04-27.xlsx")
all.equal(a, b)
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
b = read_xlsx("Table 13-10-0766-01 - updated 2020-04-27.xlsx")
a = read_xlsx("Table 13-10-0766-01 - updated 2020-04-28.xlsx")
all.equal(b, a)
all.equal(a, b)
c = all.equal(a, b)
isTRUE(c)
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
