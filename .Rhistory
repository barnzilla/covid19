table(d$decision)
# Load dependencies
library(dplyr); library(readr); library(tidyr)
# Import abstracts (long format)
d <- read_csv(
file = "c:/users/joelb/onedrive/github/scapps/r/scapps abstracts - 2021.csv",
locale(encoding = "WINDOWS-1251", "UTF-8"),
col_names = TRUE,
col_types = NULL
)
# Pivot wide
d <- d %>% pivot_wider(id_cols = id, names_from = meta_key, values_from = meta_value)
# Filter out rejected and withdrawn abstracts
d <- d %>% filter(! decision %in% c("Reject+", "Withdrawn"))
# Load dependencies
library(dplyr); library(readr); library(tidyr)
# Import abstracts (long format)
d <- read_csv(
file = "c:/users/joelb/onedrive/github/scapps/r/scapps abstracts - 2021.csv",
locale(encoding = "WINDOWS-1251", "UTF-8"),
col_names = TRUE,
col_types = NULL
)
# Import abstracts (long format)
d <- read_csv(
file = "c:/users/joelb/onedrive/github/scapps/r/scapps abstracts - 2021.csv",
locale(encoding = "WINDOWS-1251", "UTF8"),
col_names = TRUE,
col_types = NULL
)
# Import abstracts (long format)
d <- read_csv(
file = "c:/users/joelb/onedrive/github/scapps/r/scapps abstracts - 2021.csv",
locale(encoding = "WINDOWS-1251", "UTF-8"),
col_names = TRUE,
col_types = NULL
)
# Import abstracts (long format)
d <- read_csv(
file = "c:/users/joelb/onedrive/github/scapps/r/scapps abstracts - 2021.csv",
locale(encoding = "UTF-8"),
col_names = TRUE,
col_types = NULL
)
# Pivot wide
d <- d %>% pivot_wider(id_cols = id, names_from = meta_key, values_from = meta_value)
# Import abstracts (long format)
d <- read_csv(
file = "c:/users/joelb/onedrive/github/scapps/r/scapps abstracts - 2021.csv",
locale(encoding = c("WINDOWS-1251", "UTF-8")),
col_names = TRUE,
col_types = NULL
)
# Load dependencies
library(dplyr); library(readr); library(tidyr)
# Import abstracts (long format)
d <- read_csv(
file = "c:/users/joelb/onedrive/github/scapps/r/scapps abstracts - 2021.csv",
locale(encoding = "WINDOWS-1251"),
col_names = TRUE,
col_types = NULL
)
# Pivot wide
d <- d %>% pivot_wider(id_cols = id, names_from = meta_key, values_from = meta_value)
# Filter out rejected and withdrawn abstracts
d <- d %>% filter(! decision %in% c("Reject+", "Withdrawn"))
View(d %>% filter(id %in% c(130, 132)))
# Add research streams for Keynotes, Distinguished Lectures and Symposia
d$research_stream[d$id %in% c(130, 132)] <- "Keynotes"
d$research_stream[d$id %in% c(129, 131)] <- "Distinguished Lectures"
d$research_stream[d$id %in% c(218, 219, 220)] <- "Symposium"
table(d$research_stream)
names(d)
sort(names(d))
# Add empty columns for select variables
d$authornames <- NA
d$authoraffiliations <- NA
d$abstracttitle <- NA
d$authornames <- NA
d$authoraffiliations <- NA
d$abstracttitle <- NA
d$abstractbody <- NA
d$abstractacknowledgements <- NA
# Export data
write.csv(d, "c:/users/joelb/onedrive/github/scapps/r/SCAPPS abstracts - 2021 - converted to wide format.csv", na = "", row.names = FALSE)
# Load dependencies
library(dplyr); library(readr); library(tidyr)
# Import abstracts (long format)
d <- read_csv(
file = "c:/users/joelb/onedrive/github/scapps/r/scapps abstracts - 2021.csv",
locale(encoding = "WINDOWS-1251"),
col_names = TRUE,
col_types = NULL
)
# Pivot wide
d <- d %>% pivot_wider(id_cols = id, names_from = meta_key, values_from = meta_value)
# Filter out rejected and withdrawn abstracts
d <- d %>% filter(! decision %in% c("Reject+", "Withdrawn"))
# Add research streams for Keynotes, Distinguished Lectures and Symposia
d$research_stream[d$id %in% c(130, 132)] <- "Keynotes"
d$research_stream[d$id %in% c(129, 131)] <- "Distinguished Lectures"
d$research_stream[d$id %in% c(218, 219, 220)] <- "Symposium"
# Add notification column
d$notification <- "accept"
# Add empty columns for select variables
d$authornames <- NA
d$authoraffiliations <- NA
d$abstracttitle <- NA
d$abstractbody <- NA
d$abstractacknowledgements <- NA
# Export data
write.csv(d, "c:/users/joelb/onedrive/github/scapps/r/SCAPPS abstracts - 2021 - converted to wide format.csv", na = "", row.names = FALSE)
View(d[7,])
View(d %>% filter(id == 7))
# Fix character conversion issues
d$given_names_1[d$id == 7] <- "‪Stéphanie"
View(d[d$id == 48])
View(d[d$id == 48,])
# Fix character conversion issues
d$given_names_1[d$id == 7] <- "‪Stéphanie"
d$given_names_2[d$id == 48]<- "Raphaël"
d$given_names_3[d$id == 48]<- "Jean-François"
View(d[d$id == 48,])
d$last_name_3[d$id == 29] <- "Côté"
d$given_names_1[d$id == 7] <- "‪Stéphanie"
d$last_name_3[d$id == 29] <- "Côté"
d$given_names_2[d$id == 48] <- "Raphaël"
d$given_names_3[d$id == 48] <- "Jean-François"
d$given_names_2[d$id == 74] <- "François"
d$last_name_2[d$id == 74] <- "Thénault"
d$given_names_6[d$id == 78] <- "François"
d$last_name_4[d$id == 100] <- "Côté"
d$last7[d$id == 122]
d$last_name_7[d$id == 122]
d$last_name_7[d$id == 122] <- ""
d$last_name_7[d$id == 122]
d$last_name_7[d$id == 122] <- NA
d$last_name_7[d$id == 122]
d$given_names_9[d$id == 128] <- "Genviève"
d$given_names_9[d$id == 128]
install.packages("RMySQL")
# Load dependencies
library(dplyr); library(readr); library(RMySQL); library(tidyr)
browseVignettes("RMySQL")
# Import abstracts (long format)
con <- dbConnect(RMySQL::MySQL(), dbname = "scapps")
?dbConnect
db <- dbConnect(MySQL(), user = "root", password = "", dbname = "scapps", host = "localhost")
db
# Fetch data
q <- dbSendQuery(db, "SELECT * FROM scapps_abstracts")
# Retrieve data from query
d <- fetch(q, n = -1)
View(d)
# Pivot wide
d <- d %>% pivot_wider(id_cols = id, names_from = meta_key, values_from = meta_value)
# Filter out rejected and withdrawn abstracts
d <- d %>% filter(! decision %in% c("Reject+", "Withdrawn"))
# Add research streams for Keynotes, Distinguished Lectures and Symposia
d$research_stream[d$id %in% c(130, 132)] <- "Keynotes"
d$research_stream[d$id %in% c(129, 131)] <- "Distinguished Lectures"
d$research_stream[d$id %in% c(218, 219, 220)] <- "Symposium"
# Add notification column
d$notification <- "accept"
# Add empty columns for select variables
d$authornames <- NA
d$authoraffiliations <- NA
d$abstracttitle <- NA
d$abstractbody <- NA
d$abstractacknowledgements <- NA
?dbWriteTable
# Export data
dbWriteTable(db, value = d, name = "MyTable")
# Export data
write.csv(d, "c:/users/joelb/onedrive/github/scapps/r/SCAPPS abstracts - 2021 - converted to wide format.csv", na = "", row.names = FALSE)
# Export data
write.csv(d, "c:/users/joelb/onedrive/github/scapps/r/scapps_abstracts_2021.csv", na = "", row.names = FALSE)
?dbConnect
# Connect to MySQL database
db <- dbConnect(
MySQL(),
user = "root",
password = "",
dbname = "scapps",
host = "localhost",
encoding = "WINDOWS-1252"
)
# Fetch data
q <- dbSendQuery(db, "SELECT * FROM scapps_abstracts")
# Retrieve data from query
d <- fetch(q, n = -1)
# Pivot wide
d <- d %>% pivot_wider(id_cols = id, names_from = meta_key, values_from = meta_value)
# Filter out rejected and withdrawn abstracts
d <- d %>% filter(! decision %in% c("Reject+", "Withdrawn"))
# Add research streams for Keynotes, Distinguished Lectures and Symposia
d$research_stream[d$id %in% c(130, 132)] <- "Keynotes"
d$research_stream[d$id %in% c(129, 131)] <- "Distinguished Lectures"
d$research_stream[d$id %in% c(218, 219, 220)] <- "Symposium"
# Add notification column
d$notification <- "accept"
# Add empty columns for select variables
d$authornames <- NA
d$authoraffiliations <- NA
d$abstracttitle <- NA
d$abstractbody <- NA
d$abstractacknowledgements <- NA
# Export data
dbWriteTable(db, value = d, name = "MyTable")
# Load dependencies
library(dplyr); library(readr); library(RMySQL); library(tidyr)
# Connect to MySQL database
db <- dbConnect(
MySQL(),
user = "root",
password = "",
dbname = "scapps",
host = "localhost",
encoding = "windows-1252"
)
# Fetch data
q <- dbSendQuery(db, "SELECT * FROM scapps_abstracts")
# Retrieve data from query
d <- fetch(q, n = -1)
# Pivot wide
d <- d %>% pivot_wider(id_cols = id, names_from = meta_key, values_from = meta_value)
# Filter out rejected and withdrawn abstracts
d <- d %>% filter(! decision %in% c("Reject+", "Withdrawn"))
# Add research streams for Keynotes, Distinguished Lectures and Symposia
d$research_stream[d$id %in% c(130, 132)] <- "Keynotes"
d$research_stream[d$id %in% c(129, 131)] <- "Distinguished Lectures"
d$research_stream[d$id %in% c(218, 219, 220)] <- "Symposium"
# Add notification column
d$notification <- "accept"
# Add empty columns for select variables
d$authornames <- NA
d$authoraffiliations <- NA
d$abstracttitle <- NA
d$abstractbody <- NA
d$abstractacknowledgements <- NA
# Export data
dbWriteTable(db, value = d, name = "MyTable")
table(d$research_stream)
# Load dependencies
library(dplyr); library(readr); library(RMySQL); library(tidyr)
# Connect to MySQL database
db <- dbConnect(
MySQL(),
user = "root",
password = "",
dbname = "scapps",
host = "localhost",
encoding = "windows-1252"
)
# Fetch data
q <- dbSendQuery(db, "SELECT * FROM scapps_abstracts")
# Retrieve data from query
d <- fetch(q, n = -1)
# Pivot wide
d <- d %>% pivot_wider(id_cols = id, names_from = meta_key, values_from = meta_value)
# Filter out rejected and withdrawn abstracts
d <- d %>% filter(! decision %in% c("Reject+", "Withdrawn"))
# Add research streams for Keynotes, Distinguished Lectures and Symposia
d$research_stream[d$id %in% c(130, 132)] <- "Keynotes"
d$research_stream[d$id %in% c(129, 131)] <- "Distinguished Lectures"
d$research_stream[d$id %in% c(218, 219, 220)] <- "Symposium"
# Add notification column
d$notification <- "accept"
# Add empty columns for select variables
d$authornames <- NA
d$authoraffiliations <- NA
d$abstracttitle <- NA
d$abstractbody <- NA
d$abstractacknowledgements <- NA
d$alphabetical_order <- NA
# Alphabetize abstracts
d <- d %>% arrange(
last_name_1,
given_names_1,
last_name_2,
given_names_2
)
View(d)
names(d)
# Alphabetize abstracts
d <- d %>% arrange(
last_name_1,
given_names_1,
last_name_2,
given_names_2,
last_name_3,
given_names_3,
last_name_4,
given_names_4,
last_name_5,
given_names_5,
last_name_6,
given_names_6,
last_name_7,
given_names_7,
last_name_8,
given_names_8,
last_name_9,
given_names_9,
last_name_10,
given_names_10,
last_name_11,
given_names_11,
title
)
d$alphabetical_order <- 1:nrow(d)
# Export data
write.csv(d, "c:/users/joelb/onedrive/github/scapps/r/scapps_abstracts_2021.csv", na = "", row.names = FALSE)
library(dplyr); library(ggplot2)
d <- tibble(
x = 1:30,
y = c(rep("a", 10), rep("b", 10), rep("c", 10))
)
d <- tibble(
x = 1:30,
y = sample(1:30, 30)
z = c(rep("a", 10), rep("b", 10), rep("c", 10))
)
d <- tibble(
x = 1:30,
y = sample(1:30, 30),
z = c(rep("a", 10), rep("b", 10), rep("c", 10))
)
View(d)
ggplot(data = d, aes(x = x, y = y, color = z))
ggplot(data = d, aes(x = x, y = y, color = z)) +_
geom_point()
ggplot(data = d, aes(x = x, y = y, color = z)) +
geom_point()
ggplot(data = d, aes(x = x, y = y, color = z)) +
geom_point() +
geom_smooth(stat = "lm")
ggplot(data = d, aes(x = x, y = y, color = z)) +
geom_point() +
geom_smooth(method = "lm")
d <- tibble(
x = 1:30,
y = sample(1:30, 30),
z = c(rep("a", 10), rep("b", 10), rep("c", 10)),
z2 = d
)
ggplot(data = d, aes(x = x, y = y, color = z)) +
geom_point() +
geom_smooth(method = "lm", aes(color = z2))
d <- tibble(
x = 1:30,
y = sample(1:30, 30),
z = c(rep("a", 10), rep("b", 10), rep("c", 10)),
z2 = "d"
)
d
ggplot(data = d, aes(x = x, y = y, color = z)) +
geom_point() +
geom_smooth(method = "lm", aes(color = z2))
ggplot(data = d, aes(x = x, y = y, color = z)) +
geom_point() +
geom_smooth(method = "lm", aes(group = z2))
# Create fake data
d <- tibble(
x = 1:30,
y = sample(1:30, 30),
real_grouping_vector = c(rep("a", 10), rep("b", 10), rep("c", 10)),
dummy_grouping_vector = "d"
)
ggplot(data = d, aes(x = x, y = y, color = real_grouping_vector)) +
geom_point() + geom_smooth(method = "lm", aes(group = dummy_grouping_vector))
ggplot(data = d, aes(x, y, color = real_grouping_vector)) +
geom_point() + geom_smooth(method = "lm", aes(group = dummy_grouping_vector))
ggplot(data = d, aes(x, y, color = real_grouping_vector)) +
geom_point() + geom_smooth(method = "lm", aes(group = dummy_grouping_vector)) +
theme(legend.title = element_blank())
# Render scatter plot with line of best fit
ggplot(data = d, aes(x, y, color = real_grouping_vector)) +
geom_point() + geom_smooth(method = "lm", aes(group = dummy_grouping_vector)) +
theme(legend.title = element_blank()) + theme_minimal()
# Render scatter plot with line of best fit
ggplot(data = d, aes(x, y, color = real_grouping_vector)) +
geom_point() + geom_smooth(method = "lm", aes(group = dummy_grouping_vector)) +
theme_minimal() + theme(legend.title = element_blank())
seq(c("a", "b", "c"), 10)
rep(c("a", "b", "c"), 30)
rep(c("a", "b", "c"), each = 10)
# Create fake data
d <- tibble(
x = 1:30,
y = sample(1:30, 30),
real_grouping_vector = rep(letters[1:3], each = 10),
dummy_grouping_vector = "d"
)
# Render scatter plot with line of best fit
ggplot(data = d, aes(x, y, color = real_grouping_vector)) +
geom_point() + geom_smooth(method = "lm", aes(group = dummy_grouping_vector)) +
theme_minimal() + theme(legend.title = element_blank())
# Load dependencies
library(dplyr); library(ggplot2)
# Create fake data
d <- tibble(
x = 1:30,
y = sample(1:30, 30),
real_grouping_vector = rep(letters[1:3], each = 10),
dummy_grouping_vector = letters[4]
)
# Render scatter plot with line of best fit
ggplot(data = d, aes(x, y, color = real_grouping_vector)) +
geom_point() + geom_smooth(method = "lm", aes(group = dummy_grouping_vector)) +
theme_minimal() + theme(legend.title = element_blank())
# Load dependencies
library(dplyr); library(ggplot2)
# Create fake data
d <- tibble(
x = 1:30,
y = sample(1:30, 30),
real_grouping_vector = rep(letters[1:3], each = 10),
dummy_grouping_vector = letters[4]
)
# Render scatter plot with line of best fit
ggplot(data = d, aes(x, y, color = real_grouping_vector)) +
geom_point() + geom_smooth(method = "lm", aes(group = dummy_grouping_vector)) +
theme_minimal() + theme(legend.title = element_blank())
# Load dependencies
library(cansim); library(plyr); library(dplyr); library(stringr); library(readr); library(tidyr)
# Helper functions
# Wrangle the raw data
wrangle_data <- function(d) {
d_wide <- d %>% filter(`Episode week` != 99)
# Add leading zeros to Case Identifier Number
d_wide$`Case identifier number` <- str_pad(d_wide$`Case identifier number`, width = nchar(max(as.numeric(d$`Case identifier number`))), pad = "0")
# Identify select vectors
vectors_to_factor <- c("Age group", "Gender", "Region", "Occupation", "Asymptomatic", "Transmission", "Hospital status", "Recovered", "Death")
# Restructure as factors
d_wide[vectors_to_factor] <- lapply(d_wide[vectors_to_factor], factor)
# Add semantic labels
d_wide$`Age group` <- revalue(d_wide$`Age group`, c("1" = "0-19", "2" = "20-29", "3" = "30-39", "4" = "40-49", "5" = "50-59", "6" = "60-69", "7" = "70-79", "8" = "80+", "99" = "Not stated"), warn_missing = FALSE)
d_wide$Gender <- revalue(d_wide$Gender, c("1" = "Male", "2" = "Female", "3" = "Non-binary", "7" = "Non-binary", "9" = "Not stated"), warn_missing = FALSE)
d_wide$Region <- revalue(d_wide$Region, c("1" = "Atlantic", "2" = "Quebec", "3" = "Ontario and Nunavut", "4" = "Prairies and the Northwest Territories", "5" = "British Columbia and Yukon"), warn_missing = FALSE)
d_wide$Occupation <- revalue(d_wide$Occupation, c("1" = "Health care worker", "2" = "School or daycare worker/attendee", "3" = "Long term care resident", "4" = "Other", "9" = "Not stated"), warn_missing = FALSE)
d_wide$Asymptomatic <- revalue(d_wide$Asymptomatic, c("1" = "Yes", "2" = "No", "9" = "Not stated"), warn_missing = FALSE)
d_wide$Transmission <- revalue(d_wide$Transmission, c("1" = "Domestic acquisition", "2" = "International travel", "9" = "Not stated"), warn_missing = FALSE)
d_wide$`Hospital status` <- revalue(d_wide$`Hospital status`, c("1" = "Hospitalized and in intensive care unit", "2" = "Hospitalized, but not in intensive care unit", "3" = "Not hospitalized", "9" = "Not stated/unknown"), warn_missing = FALSE)
d_wide$Recovered <- revalue(d_wide$Recovered, c("1" = "Yes", "2" = "No", "9" = "Not stated"), warn_missing = FALSE)
d_wide$Death <- revalue(d_wide$Death, c("1" = "Yes", "2" = "No", "9" = "Not stated"), warn_missing = FALSE)
# Add day (select first day of the week since not given), month and reference year vectors together and structure as a date object
d_wide$`Episode date` <- as.Date(paste(d_wide$`Episode year`, str_pad(d_wide$`Episode week`, width = 2, pad = 0), 1, sep = "-"), "%Y-%U-%u")
# Change format to %d-%b-%y
d_wide$`Episode date` <- strftime(d_wide$`Episode date`, format = "%d-%b-%y")
# Remove unwanted vectors from data
d_wide <- d_wide %>% select("Case identifier number", "Episode date", Gender, "Age group", "Region", "Occupation", Asymptomatic, Transmission, "Hospital status", Recovered, Death)
# Order data by case ids in ascending order
d_wide <- d_wide %>% arrange(`Case identifier number`)
return(d_wide)
}
# Set working directory
setwd("c:/users/joelb/onedrive/github/covid19")
# Import data
d <- read_csv(paste0(getwd(), "/data/raw-data/", sort(list.files(paste0(getwd(), "/data/raw-data")), decreasing = TRUE)[1]))
# Change vector names
lookup <- tibble(
short = c(
"COV_ID",
"COV_REG",
"COV_EW",
"COV_EWG",
"COV_EY",
"COV_GDR",
"COV_AGR",
"COV_OCC",
"COV_ASM",
"COV_OW",
"COV_OY",
"COV_HSP",
"COV_RSV",
"COV_RW",
"COV_RY",
"COV_DTH",
"COV_TRM"
),
long = c(
"Case identifier number",
"Region",
"Episode week",
"Episode week group",
"Episode year",
"Gender",
"Age group",
"Occupation",
"Asymptomatic",
"Onset week of symptoms",
"Onset year of symptoms",
"Hospital status",
"Recovered",
"Resolution week",
"Resolution year",
"Death",
"Transmission"
)
)
names(d) <- sapply(names(d), function(x) {
if(x %in% lookup$short) {
output <- lookup$long[lookup$short == x]
} else {
output <- x
}
})
# Wrangle data
new_snapshot <- wrangle_data(d)
# Convert `Episode Date` to date object
new_snapshot$`Episode date` <- as.Date(new_snapshot$`Episode date`, "%d-%b-%y")
