day[i] <- as.numeric(x[i] - day1)
}
return(day)
}
get_crosstab <- function(combo) {
e <- c()
if(length(grep("\\All\\b", combo$age_group)) == 0) {
e <- "`Age Group` %in% combo$age_group & "
}
e <- paste0("d %>% filter(", e, "Gender %in% combo$gender & Hospitalized %in% combo$hospitalized)", collapse = "")
d <- eval(parse(text = e))
# Convert episode date to date object
d$`Episode Date` <- as.Date(d$`Episode Date`, format = "%d-%b-%y")
# Remove cases with no episode date
d <- d %>% filter(! is.na(`Episode Date`))
# Sort data by episode date
d <- d[order(d$`Episode Date`),]
# Create a crosstab
crosstab <- d %>% group_by(`Episode Date`) %>% tally()
# Rename the n vector
names(crosstab)[ncol(crosstab)] <- "Incidence"
# Compute cumulative incidence
crosstab <- crosstab %>% mutate(`Cumulative Incidence` = cumsum(Incidence))
# Create an age group vector
crosstab <- crosstab %>% mutate(`Age Group` = rep(combo$age_group, nrow(crosstab)), Gender = rep(combo$gender, nrow(crosstab)), Hospitalized = rep(combo$hospitalized, nrow(crosstab)))
# Reorder columns
crosstab <- crosstab %>% select(`Age Group`, Gender, Hospitalized, everything())
# Add day column
crosstab <- crosstab %>% mutate(Day = get_days(unlist(`Episode Date`), day1 = min(crosstab$`Episode Date`)))
return(crosstab)
}
View(get_crosstab(combos[1,]))
crosstab <- tibble()
?add_rows
?bind_rows
crosstab <- tibble()
for(row in combos) {
crosstab <- rbind(crosstab, get_crosstab(row))
}
for(row in combos) {
#crosstab <- rbind(crosstab, get_crosstab(row))
print(row)
}
crosstab <- tibble()
for(row in combos) {
crosstab <- rbind(crosstab, get_crosstab(row[i,]))
}
crosstab <- tibble()
for(row in 1:nrow(combos)) {
crosstab <- rbind(crosstab, get_crosstab(row[i,]))
}
names(combos)
str(combos)
for(row in 1:nrow(combos)) {
#crosstab <- rbind(crosstab, get_crosstab(row[i,]))
row[i,]
}
for(row in i:nrow(combos)) {
#crosstab <- rbind(crosstab, get_crosstab(row[i,]))
row[i,]
}
for(row in 1:nrow(combos)) {
#crosstab <- rbind(crosstab, get_crosstab(combos[row,]))
row[i,]
}
crosstab <- tibble()
for(row in 1:nrow(combos)) {
crosstab <- rbind(crosstab, get_crosstab(combos[row,]))
}
View(combos)
View(crosstab)
d %>% filter()
get_crosstab <- function(combo) {
e <- c()
if(length(grep("\\All\\b", combo$age_group)) == 0) {
e1 <- "`Age Group` %in% combo$age_group & "
}
if(length(grep("\\All\\b", combo$gender)) == 0) {
e2 <- "Gender %in% combo$gender & "
}
if(length(grep("\\All\\b", combo$hospitalized)) == 0) {
e3 <- "Hospitalized %in% combo$hospitalized "
}
e <- paste0("d %>% filter(", e1, e2, e3, ")", collapse = "")
d <- eval(parse(text = e))
# Convert episode date to date object
d$`Episode Date` <- as.Date(d$`Episode Date`, format = "%d-%b-%y")
# Remove cases with no episode date
d <- d %>% filter(! is.na(`Episode Date`))
# Sort data by episode date
d <- d[order(d$`Episode Date`),]
# Create a crosstab
crosstab <- d %>% group_by(`Episode Date`) %>% tally()
# Rename the n vector
names(crosstab)[ncol(crosstab)] <- "Incidence"
# Compute cumulative incidence
crosstab <- crosstab %>% mutate(`Cumulative Incidence` = cumsum(Incidence))
# Create an age group vector
crosstab <- crosstab %>% mutate(`Age Group` = rep(combo$age_group, nrow(crosstab)), Gender = rep(combo$gender, nrow(crosstab)), Hospitalized = rep(combo$hospitalized, nrow(crosstab)))
# Reorder columns
crosstab <- crosstab %>% select(`Age Group`, Gender, Hospitalized, everything())
# Add day column
crosstab <- crosstab %>% mutate(Day = get_days(unlist(`Episode Date`), day1 = min(crosstab$`Episode Date`)))
return(crosstab)
}
combos <- expand.grid(list(age_group = age_input, gender = sample(gender_input, 1), hospitalized = sample(hospitalized_input, 1)), KEEP.OUT.ATTRS = FALSE)
View(combos)
crosstab <- tibble()
for(row in 1:nrow(combos)) {
crosstab <- rbind(crosstab, get_crosstab(combos[row,]))
}
a1 <- a2 <- a3 <- 99
a1
a2
get_crosstab <- function(combo) {
e1 <- e2 <- e3 <- c()
if(length(grep("\\All\\b", combo$age_group)) == 0) {
e1 <- "`Age Group` %in% combo$age_group & "
}
if(length(grep("\\All\\b", combo$gender)) == 0) {
e2 <- "Gender %in% combo$gender & "
}
if(length(grep("\\All\\b", combo$hospitalized)) == 0) {
e3 <- "Hospitalized %in% combo$hospitalized "
}
e <- paste0("d %>% filter(", e1, e2, e3, ")", collapse = "")
d <- eval(parse(text = e))
# Convert episode date to date object
d$`Episode Date` <- as.Date(d$`Episode Date`, format = "%d-%b-%y")
# Remove cases with no episode date
d <- d %>% filter(! is.na(`Episode Date`))
# Sort data by episode date
d <- d[order(d$`Episode Date`),]
# Create a crosstab
crosstab <- d %>% group_by(`Episode Date`) %>% tally()
# Rename the n vector
names(crosstab)[ncol(crosstab)] <- "Incidence"
# Compute cumulative incidence
crosstab <- crosstab %>% mutate(`Cumulative Incidence` = cumsum(Incidence))
# Create an age group vector
crosstab <- crosstab %>% mutate(`Age Group` = rep(combo$age_group, nrow(crosstab)), Gender = rep(combo$gender, nrow(crosstab)), Hospitalized = rep(combo$hospitalized, nrow(crosstab)))
# Reorder columns
crosstab <- crosstab %>% select(`Age Group`, Gender, Hospitalized, everything())
# Add day column
crosstab <- crosstab %>% mutate(Day = get_days(unlist(`Episode Date`), day1 = min(crosstab$`Episode Date`)))
return(crosstab)
}
crosstab <- tibble()
for(row in 1:nrow(combos)) {
crosstab <- rbind(crosstab, get_crosstab(combos[row,]))
}
View(crosstab)
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
str(crosstab)
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
View(crosstab)
str(crosstab)
ggplotly(ggplot(crosstab , aes(x = `Episode Date`, y = `Cumulative Incidence`)) +
geom_line(aes(color = `Age Group`), size = point_size) +
#ggtitle("Cumulative incidence") +
xlab("Date") +
ylab("Cumulative incidence") +
scale_y_continuous(labels = comma) +
theme_minimal() +
theme(
plot.title = element_text(size = element_text_size),
axis.title.x = element_text(size = element_text_size),
axis.title.y = element_text(size = element_text_size),
legend.text = element_text(size = element_text_size),
legend.title = element_blank()
))
point_size <- 0.5
element_text_size <- 12
ggplotly(ggplot(crosstab , aes(x = `Episode Date`, y = `Cumulative Incidence`)) +
geom_line(aes(color = `Age Group`), size = point_size) +
#ggtitle("Cumulative incidence") +
xlab("Date") +
ylab("Cumulative incidence") +
scale_y_continuous(labels = comma) +
theme_minimal() +
theme(
plot.title = element_text(size = element_text_size),
axis.title.x = element_text(size = element_text_size),
axis.title.y = element_text(size = element_text_size),
legend.text = element_text(size = element_text_size),
legend.title = element_blank()
))
crosstab$`Age Group` <- as.character(crosstab$`Age Group`)
str(crosstab)
ggplotly(ggplot(crosstab , aes(x = `Episode Date`, y = `Cumulative Incidence`)) +
geom_line(aes(color = `Age Group`), size = point_size) +
#ggtitle("Cumulative incidence") +
xlab("Date") +
ylab("Cumulative incidence") +
scale_y_continuous(labels = comma) +
theme_minimal() +
theme(
plot.title = element_text(size = element_text_size),
axis.title.x = element_text(size = element_text_size),
axis.title.y = element_text(size = element_text_size),
legend.text = element_text(size = element_text_size),
legend.title = element_blank()
))
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
j <- c()
nchar(j)
nchar(j) > 0
length(j)
j <- c("1")
length(j)
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
get_crosstab <- function(combo) {
e1 <- e2 <- e3 <- c()
if(length(grep("\\All\\b", combo$age_group)) == 0) {
e1 <- "`Age Group` %in% combo$age_group & "
}
if(length(grep("\\All\\b", combo$gender)) == 0) {
e2 <- "Gender %in% combo$gender & "
}
if(length(grep("\\All\\b", combo$hospitalized)) == 0) {
e3 <- "Hospitalized %in% combo$hospitalized "
}
e <- paste0("d %>% filter(", e1, e2, e3, ")", collapse = "")
d <- eval(parse(text = e))
# Convert episode date to date object
d$`Episode Date` <- as.Date(d$`Episode Date`, format = "%d-%b-%y")
# Remove cases with no episode date
d <- d %>% filter(! is.na(`Episode Date`))
# Sort data by episode date
d <- d[order(d$`Episode Date`),]
# Create a crosstab
crosstab <- d %>% group_by(`Episode Date`) %>% tally()
# Rename the n vector
names(crosstab)[ncol(crosstab)] <- "Incidence"
# Compute cumulative incidence
crosstab <- crosstab %>% mutate(`Cumulative Incidence` = cumsum(Incidence))
# Create an age group vector
crosstab <- crosstab %>% mutate(`Age Group` = rep(combo$age_group, nrow(crosstab)), Gender = rep(combo$gender, nrow(crosstab)), Hospitalized = rep(combo$hospitalized, nrow(crosstab)))
# Reorder columns
crosstab <- crosstab %>% select(`Age Group`, Gender, Hospitalized, everything())
# Add day column
crosstab <- crosstab %>% mutate(Day = get_days(unlist(`Episode Date`), day1 = min(crosstab$`Episode Date`)))
return(crosstab)
}
crosstab <- tibble()
for(row in 1:nrow(combos)) {
crosstab <- rbind(crosstab, get_crosstab(combos[row,]))
}
View(crosstab)
a <- paste0(c(), "a")
a
paste0("(", ")")
paste0("(", "a", ")")
paste0("(", "a", "&", ")")
paste0("(", "a", "&", ")", collapse = "&")
a <- "hello world"
b <- "my name is joel"
paste0(a, b)
paste0(a, b)
length(paste0(a, b))
e1 <- c()
length(E1)
length(e1)
e2 = "blah"
e2 = paste0(" & ", e2)
e2
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
combos <- expand.grid(list(age_group = age_input, gender = sample(gender_input, 1), hospitalized = sample(hospitalized_input, 1)), KEEP.OUT.ATTRS = FALSE)
age_input <- c(unique(d$`Age Group`))
gender_input <- c("All genders", unique(d$Gender))
hospitalized_input <- c("All conditions", unique(d$Hospitalized))
combos <- expand.grid(list(age_group = age_input, gender = sample(gender_input, 1), hospitalized = sample(hospitalized_input, 1)), KEEP.OUT.ATTRS = FALSE)
combos <- expand.grid(list(age_group = age_input, gender = "All genders", hospitalized = "All conditions"), KEEP.OUT.ATTRS = FALSE)
get_crosstab <- function(combo) {
e1 <- e2 <- e3 <- c()
if(length(grep("\\All\\b", combo$age_group)) == 0) {
e1 <- "`Age Group` %in% combo$age_group & "
}
if(length(grep("\\All\\b", combo$gender)) == 0) {
e2 <- "Gender %in% combo$gender & "
}
if(length(grep("\\All\\b", combo$hospitalized)) == 0) {
e3 <- "Hospitalized %in% combo$hospitalized "
}
e <- paste0("d %>% filter(", e1, e2, e3, ")", collapse = "")
d <- eval(parse(text = e))
# Convert episode date to date object
d$`Episode Date` <- as.Date(d$`Episode Date`, format = "%d-%b-%y")
# Remove cases with no episode date
d <- d %>% filter(! is.na(`Episode Date`))
# Sort data by episode date
d <- d[order(d$`Episode Date`),]
# Create a crosstab
crosstab <- d %>% group_by(`Episode Date`) %>% tally()
# Rename the n vector
names(crosstab)[ncol(crosstab)] <- "Incidence"
# Compute cumulative incidence
crosstab <- crosstab %>% mutate(`Cumulative Incidence` = cumsum(Incidence))
# Create an age group vector
crosstab <- crosstab %>% mutate(`Age Group` = rep(combo$age_group, nrow(crosstab)), Gender = rep(combo$gender, nrow(crosstab)), Hospitalized = rep(combo$hospitalized, nrow(crosstab)))
# Reorder columns
crosstab <- crosstab %>% select(`Age Group`, Gender, Hospitalized, everything())
# Add day column
crosstab <- crosstab %>% mutate(Day = get_days(unlist(`Episode Date`), day1 = min(crosstab$`Episode Date`)))
return(crosstab)
}
crosstab <- tibble()
for(row in 1:nrow(combos)) {
crosstab <- rbind(crosstab, get_crosstab(combos[row,]))
}
get_crosstab <- function(combo, data) {
d <- data
e1 <- e2 <- e3 <- c()
if(length(grep("\\All\\b", combo$age_group)) == 0) {
e1 <- "`Age Group` %in% combo$age_group &"
}
if(length(grep("\\All\\b", combo$gender)) == 0) {
e2 <- "Gender %in% combo$gender &"
}
if(length(grep("\\All\\b", combo$hospitalized)) == 0) {
e3 <- "Hospitalized %in% combo$hospitalized"
}
if(length(e1) > 0 | length(e2) == 0 | length(e3) == 0) {
e <- paste0("d %>% filter(", e1, e2, e3, ")")
e <- gsub("&)", ")", e)
#e <- paste0("d %>% filter(", e1, e2, ")", collapse = "")
d <- eval(parse(text = e))
}
# Convert episode date to date object
d$`Episode Date` <- as.Date(d$`Episode Date`, format = "%d-%b-%y")
# Remove cases with no episode date
d <- d %>% filter(! is.na(`Episode Date`))
# Sort data by episode date
d <- d[order(d$`Episode Date`),]
# Create a crosstab
crosstab <- d %>% group_by(`Episode Date`) %>% tally()
# Rename the n vector
names(crosstab)[ncol(crosstab)] <- "Incidence"
# Compute cumulative incidence
crosstab <- crosstab %>% mutate(`Cumulative Incidence` = cumsum(Incidence))
# Create an age group vector
crosstab <- crosstab %>% mutate(`Age Group` = rep(combo$age_group, nrow(crosstab)), Gender = rep(combo$gender, nrow(crosstab)), Hospitalized = rep(combo$hospitalized, nrow(crosstab)))
# Reorder columns
crosstab <- crosstab %>% select(`Age Group`, Gender, Hospitalized, everything())
# Add day column
crosstab <- crosstab %>% mutate(Day = get_days(unlist(`Episode Date`), day1 = min(crosstab$`Episode Date`)))
return(crosstab)
}
d
crosstab <- tibble()
for(row in 1:nrow(combos)) {
crosstab <- rbind(crosstab, get_crosstab(combos[row,], d))
}
View(crosstab)
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19/app2.R')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19/appCURRENT.R')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19/appCURRENT.R')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
list.files(pattern = "*.xlsx")
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
a = NULL
is.null(a)
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
1:2
t <- tibble(a = 1:10)
t$a %in% 1:5
match(t$a %in% 1:5)
t[t$a %in% 1:5,]
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
?filter
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
t
class(t)
a <- 1:10
class(a)
class(a) <- "numeric"
class(a)
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
t
t[order(t$a),]
t[order(t$a, decreasing = TRUE),]
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
?tbl_df
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
?bind_rows
t
j <- tibble(a = 1:)
j <- tibble(a = 1:5)
bind_rows(t, j)
a = bind_rows(t, j)
class(a)
a
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
dplyr::select()
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
