q <- dbSendQuery(db, "SELECT * FROM scapps_abstracts")
d <- fetch(q, n = -1)
# Filter data
d <- d %>% filter(meta_key = "research_stream")
# Filter data
d <- d %>% filter(meta_key == "research_stream")
table(d$meta_value)
# Import PMIDs
db <- dbConnect(MySQL(), user = "root", password = "", dbname = "scapps", host = "localhost")
q <- dbSendQuery(db, "SELECT * FROM scapps_abstracts")
d <- fetch(q, n = -1)
# Filter data
d <- d %>% filter(meta_key == "research_stream" | meta_key == "presentation_preference")
# Filter data
d <- d %>%
filter(meta_key == "research_stream" | meta_key == "presentation_preference") %>%
select(id, meta_key, meta_value)
# Pivot wide
d <- d %>% pivot_wider(id_cols = id, names_from = meta_key, values_from meta_value)
# Pivot wide
d <- d %>% pivot_wider(id_cols = id, names_from = meta_key, values_from = meta_value)
table(d$research_stream)
table(d$presentation_preference)
# Filter data
d <- d %>% filter(presentation_preference %in% c("Oral", "Poster"))
table(d$presentation_preference, d$research_stream)
# Create crosstab
xtab <- table(d$presentation_preference, d$research_stream)
str(xtab)
# Create crosstab
xtab <- as.data.frame(table(d$presentation_preference, d$research_stream))
xtab
# Create crosstab
xtab <- write.csv(table(d$presentation_preference, d$research_stream), "c:/users/joelb/onedrive/desktop/xtab.csv")
d = tibble(
x = 1:10
)
library(dplyr)
d = tibble(
x = 1:10
)
write.csv(d, "c:/users/joelb/onedrive/desktop/d.csv")
write.csv(d, "c:/users/joelb/onedrive/desktop/d.csv")
write.csv(d, "c:/users/joelb/onedrive/desktop/d.csv")
copy_file <- file.copy(from = "c:/users/joelb/onedrive/desktop/d.csv", to = "c:/users/joelb/onedrive/desktop/new/d.csv")
d <- tibble(
id = 1:10,
province = c("AB", "AB", "BC", "BC", "ON", "ON", "ON", "QC", "QC", "SK"),
mse = 101:110
)
library(dplyr)
d <- tibble(
id = 1:10,
province = c("AB", "AB", "BC", "BC", "ON", "ON", "ON", "QC", "QC", "SK"),
mse = 101:110
)
aggregate(d, list(d$province), function(x) min(x))
d <- tibble(
id = 1:10,
province = c("AB", "AB", "BC", "BC", "ON", "ON", "ON", "QC", "QC", "SK"),
mse = 110:101
)
aggregate(d, list(d$province), function(x) min(x))
d
aggregate(d, list(d$province), function(x) min(x$mse))
aggregate(d, list(d$province), function(x) min(x[3]))
aggregate(d$mse, list(d$province), function(x) min(x[3]))
aggregate(d$mse, list(d$province), function(x) min(x))
aggregate(d, list(d$province), function(x) min(x))
aggregate(d, list(d$province), function(x) min(x[,3]))
aggregate(d, list(d$province), function(x) min(x[3]))
library(dplyr)
d <- tibble(
id = 1:10,
province = c("AB", "AB", "BC", "BC", "ON", "ON", "ON", "QC", "QC", "SK"),
mse = 110:101
)
write.csv(d, "c:/users/joelb/onedrive/desktop/d.csv")
file.copy(
from = "c:/users/joelb/onedrive/desktop/d.csv",
to = "c:/users/joelb/onedrive/desktop/new/d.csv"
)
file.copy(
from = "c:/users/joelb/onedrive/desktop/d.csv",
to = "c:/users/joelb/onedrive/desktop/new/d.csv"
)
file.copy(
from = "c:/users/joelb/onedrive/desktop/d.csv",
to = "c:/users/joelb/onedrive/desktop/new/d.csv",
recursive = TRUE
)
file.copy(
from = "c:/users/joelb/onedrive/desktop/d.csv",
to = "c:/users/joelb/onedrive/desktop/new/d.csv",
overwrite = TRUE
)
# function needed for visualization purposes
sigmoid = function(params, x) {
params[1] / (1 + exp(-params[2] * (x - params[3])))
}
x = 1:53
y = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0.1,0.18,0.18,0.18,0.33,0.33,0.33,0.33,0.41,
0.41,0.41,0.41,0.41,0.41,0.5,0.5,0.5,0.5,0.68,0.58,0.58,0.68,0.83,0.83,0.83,
0.74,0.74,0.74,0.83,0.83,0.9,0.9,0.9,1,1,1,1,1,1,1)
# fitting code
fitmodel <- nls(y~a/(1 + exp(-b * (x-c))), start=list(a=1,b=.5,c=25))
# visualization code
# get the coefficients using the coef function
params=coef(fitmodel)
y2 <- sigmoid(params,x)
plot(y2,type="l")
?nls
# function needed for visualization purposes
sigmoid = function(params, x) {
params[1] / (1 + exp(-params[2] * (x - params[3])))
}
x = 1:10
y = c(100:105, 200, 300, 100, 0, 0)
x = 1:53
y = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0.1,0.18,0.18,0.18,0.33,0.33,0.33,0.33,0.41,
0.41,0.41,0.41,0.41,0.41,0.5,0.5,0.5,0.5,0.68,0.58,0.58,0.68,0.83,0.83,0.83,
0.74,0.74,0.74,0.83,0.83,0.9,0.9,0.9,1,1,1,1,1,1,1)
# fitting code
fitmodel <- nls(y~a/(1 + exp(-b * (x-c))), start=list(a=10,b=.5,c=25))
# visualization code
# get the coefficients using the coef function
params=coef(fitmodel)
y2 <- sigmoid(params,x)
plot(y2,type="l")
points(y)
# function needed for visualization purposes
sigmoid = function(params, x) {
params[1] / (1 + exp(-params[2] * (x - params[3])))
}
x = 1:53
y = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0.1,0.18,0.18,0.18,0.33,0.33,0.33,0.33,0.41,
0.41,0.41,0.41,0.41,0.41,0.5,0.5,0.5,0.5,0.68,0.58,0.58,0.68,0.83,0.83,0.83,
0.74,0.74,0.74,0.83,0.83,0.9,0.9,0.9,1,1,1,1,1,1,1)
# fitting code
fitmodel <- nls(y~a/(1 + exp(-b * (x-c))), start=list(a=10,b=.5,c=25))
# visualization code
# get the coefficients using the coef function
params=coef(fitmodel)
y2 <- sigmoid(params,x)
plot(y2,type="l")
points(y)
# fitting code
fitmodel <- nls(y~a/(1 + exp(-b * (x-c))), start=list(a=1,b=.5,c=10))
# visualization code
# get the coefficients using the coef function
params=coef(fitmodel)
y2 <- sigmoid(params,x)
plot(y2,type="l")
points(y)
# fitting code
fitmodel <- nls(y~a/(1 + exp(-b * (x-c))), start=list(a=1,b=.5,c=25))
# visualization code
# get the coefficients using the coef function
params=coef(fitmodel)
y2 <- sigmoid(params,x)
plot(y2,type="l")
points(y)
plot(params)
fitmodel$data
fitmodel$m
summary(fitmodel)
predict(fitmodel)
# fitting code
fitmodel <- nls(y~a/(1 + exp(-b * (x-c))), start=list(a=10,b=.5,c=25))
predict(fitmodel)
# fitting code
fitmodel <- nls(y~a/(1 + exp(-b * (x-c))), start=list(a=1,b=.5,c=25))
x = 1:53
y = x * 2
# fitting code
fitmodel <- nls(y~a/(1 + exp(-b * (x-c))), start=list(a=1,b=.5,c=25))
x = 1:53
y = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0.1,0.18,0.18,0.18,0.33,0.33,0.33,0.33,0.41,
0.41,0.41,0.41,0.41,0.41,0.5,0.5,0.5,0.5,0.68,0.58,0.58,0.68,0.83,0.83,0.83,
0.74,0.74,0.74,0.83,0.83,0.9,0.9,0.9,1,1,1,1,1,1,1)
# fitting code
fitmodel <- nls(y~a/(1 + exp(-b * (x-c))))
library(dplyr)
d <- tibble(
day = c(1, 100),
vaccinated = c(0, 0.8)
)
glm(vaccinated ~ day, data = d, family = "binomial")
mod <- glm(vaccinated ~ day, data = d, family = "binomial")
x_plogis <- seq(- 10, 10, by = 0.1)
x_plogis
x_plogis <- 1:100
x_plogis
y_plogis <- plogis(x_plogis)
y_plogis <- plogis(x_plogis)
y_plogis
x_plogis <- seq(from = 0.01, to = 1, by = 0.01)
x_plogis
y_plogis <- plogis(x_plogis)
y_plogis
plot(y_plogis)
dbinom(27, size=100, prob=0.25)
dbinom(27, 100, 0.25)
?dbinom
n <- 2000
k <- seq(0, n, by = 20)
plot (k, dbinom(k, n, pi/10, log = TRUE), type = "l", ylab = "log density",
main = "dbinom(*, log=TRUE) is better than  log(dbinom(*))")
k
??integrateODE
install.packages(mosaic)
install.packages("mosaic")
# Load dependencies
library(mosaic)
?integrate
# Load dependencies
library(mosaic)
# Create a sigmoidal distribution
solution <- integrateODE(dx ~ 1 - x, x = 0, tdur = list(from = 0, to = 5))
integrateODE(dx ~ 1 - x, x = 0, tdur = list(from = 0, to = 5))
library(mosaic)
install.packages("mosaicCalc")
#
library(mosaicCalc)
# Load dependencies
library(mosaicCalc)
# Create a sigmoidal distribution
solution <- integrateODE(dx ~ 1 - x, x = 0, tdur = list(from = 0, to = 5))
solution
plotFun(solution)
solution$x()
solution$x
# Plot
plotFun(solution$x(t) ~ t, t.lim = range(0, 5))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 1, K = 10, r = 0.5,
tdur = list(from = 0, to =20 )
)
slice_plot(soln$x(t) ~ t, domain(t=0:20))
remotes::install_github("ProjectMOSAIC/mosaicCalc", ref="beta")
detach("package:mosaicCalc")
# Load dependencies
remotes::install_github("ProjectMOSAIC/mosaicCalc", ref="beta")
# Load dependencies
#remotes::install_github("ProjectMOSAIC/mosaicCalc", ref="beta")
library(mosaicCalc)
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 1, K = 10, r = 0.5,
tdur = list(from = 0, to =20 )
)
slice_plot(soln$x(t) ~ t, domain(t=0:20))
solution$x(1:5)
solution$x(1:20)
solution$x(1:100)
plot(solution$x(1:20))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 1, K = 10, r = 0.5,
tdur = list(from = 1, to = 365)
)
plot(solution$x(1:365))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 1, K = 265, r = 0.5,
tdur = list(from = 1, to = 365)
)
plot(solution$x(1:365))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 1, K = 10, r = 0.5,
tdur = list(from = 1, to = 365)
)
plot(solution$x(1:365))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 1, K = 10, r = 0.25,
tdur = list(from = 1, to = 365)
)
plot(solution$x(1:365))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 200, K = 10, r = 0.5,
tdur = list(from = 1, to = 365)
)
plot(solution$x(1:365))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 100, K = 10, r = 0.5,
tdur = list(from = 1, to = 365)
)
plot(solution$x(1:365))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 0, K = 10, r = 0.5,
tdur = list(from = 1, to = 365)
)
plot(solution$x(1:365))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 1, K = 10, r = 0.5,
tdur = list(from = 1, to = 365)
)
plot(solution$x(1:365))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 1, K = 0.8, r = 0.5,
tdur = list(from = 1, to = 365)
)
plot(solution$x(1:365))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 0, K = 0.8, r = 0.5,
tdur = list(from = 1, to = 365)
)
plot(solution$x(1:365))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 1, K = 10, r = 0.5,
tdur = list(from = 1, to = 5)
)
plot(solution$x(1:365))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 1, K = 10, r = 0.5,
tdur = list(from = 1, to = 20)
)
plot(solution$x(1:20))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 0.001, K = 10, r = 0.5,
tdur = list(from = 1, to = 100)
)
plot(solution$x(1:100))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 1, K = 80, r = 0.5,
tdur = list(from = 1, to = 100)
)
plot(solution$x(1:100))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 0, K = 80, r = 0.5,
tdur = list(from = 1, to = 365)
)
plot(solution$x(1:365))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 0.01, K = 80, r = 0.5,
tdur = list(from = 1, to = 365)
)
plot(solution$x(1:365))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 0.01, K = 80, r = 0.25,
tdur = list(from = 1, to = 365)
)
plot(solution$x(1:365))
14.5e6
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 1, K = 14.5e6, r = 0.5,
tdur = list(from = 1, to = 365)
)
plot(solution$x(1:365))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 1, K = 14.5e6 * 0.75, r = 0.5,
tdur = list(from = 1, to = 365)
)
plot(solution$x(1:365))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 1, K = 14.5e6 * 0.75 * 2, r = 0.5,
tdur = list(from = 1, to = 365)
)
plot(solution$x(1:365))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 1, K = 14.5e6 * 0.75, r = 0.25,
tdur = list(from = 1, to = 365)
)
plot(solution$x(1:365))
sum(solution$x(1:365))
sum(solution$x(1:100))
solution <- integrateODE(
dx ~ r * x * (1 - x / K),
x = 1, K = 1e6 * 0.75, r = 0.25,
tdur = list(from = 1, to = 365)
)
plot(solution$x(1:365))
# Load dependencies
library(cansim); library(plyr); library(dplyr); library(stringr); library(readr); library(tidyr)
# Helper functions
# Wrangle the raw data
wrangle_data <- function(d) {
d_wide <- d %>% filter(`Episode week` != 99)
# Add leading zeros to Case Identifier Number
d_wide$`Case identifier number` <- str_pad(d_wide$`Case identifier number`, width = nchar(max(as.numeric(d$`Case identifier number`))), pad = "0")
# Identify select vectors
vectors_to_factor <- c("Age group", "Gender", "Region", "Occupation", "Asymptomatic", "Transmission", "Hospital status", "Recovered", "Death")
# Restructure as factors
d_wide[vectors_to_factor] <- lapply(d_wide[vectors_to_factor], factor)
# Add semantic labels
d_wide$`Age group` <- revalue(d_wide$`Age group`, c("1" = "0-19", "2" = "20-29", "3" = "30-39", "4" = "40-49", "5" = "50-59", "6" = "60-69", "7" = "70-79", "8" = "80+", "99" = "Not stated"), warn_missing = FALSE)
d_wide$Gender <- revalue(d_wide$Gender, c("1" = "Male", "2" = "Female", "3" = "Non-binary", "7" = "Non-binary", "9" = "Not stated"), warn_missing = FALSE)
d_wide$Region <- revalue(d_wide$Region, c("1" = "Atlantic", "2" = "Quebec", "3" = "Ontario and Nunavut", "4" = "Prairies and the Northwest Territories", "5" = "British Columbia and Yukon"), warn_missing = FALSE)
d_wide$Occupation <- revalue(d_wide$Occupation, c("1" = "Health care worker", "2" = "School or daycare worker/attendee", "3" = "Long term care resident", "4" = "Other", "9" = "Not stated"), warn_missing = FALSE)
d_wide$Asymptomatic <- revalue(d_wide$Asymptomatic, c("1" = "Yes", "2" = "No", "9" = "Not stated"), warn_missing = FALSE)
d_wide$Transmission <- revalue(d_wide$Transmission, c("1" = "Domestic acquisition", "2" = "International travel", "9" = "Not stated"), warn_missing = FALSE)
d_wide$`Hospital status` <- revalue(d_wide$`Hospital status`, c("1" = "Hospitalized and in intensive care unit", "2" = "Hospitalized, but not in intensive care unit", "3" = "Not hospitalized", "9" = "Not stated/unknown"), warn_missing = FALSE)
d_wide$Recovered <- revalue(d_wide$Recovered, c("1" = "Yes", "2" = "No", "9" = "Not stated"), warn_missing = FALSE)
d_wide$Death <- revalue(d_wide$Death, c("1" = "Yes", "2" = "No", "9" = "Not stated"), warn_missing = FALSE)
# Add day (select first day of the week since not given), month and reference year vectors together and structure as a date object
d_wide$`Episode date` <- as.Date(paste(d_wide$`Episode year`, str_pad(d_wide$`Episode week`, width = 2, pad = 0), 1, sep = "-"), "%Y-%U-%u")
# Change format to %d-%b-%y
d_wide$`Episode date` <- strftime(d_wide$`Episode date`, format = "%d-%b-%y")
# Remove unwanted vectors from data
d_wide <- d_wide %>% select("Case identifier number", "Episode date", Gender, "Age group", "Region", "Occupation", Asymptomatic, Transmission, "Hospital status", Recovered, Death)
# Order data by case ids in ascending order
d_wide <- d_wide %>% arrange(`Case identifier number`)
return(d_wide)
}
# Set working directory
setwd("c:/users/joelb/onedrive/github/covid19")
# Import data
d <- read_csv(paste0(getwd(), "/data/raw-data/", sort(list.files(paste0(getwd(), "/data/raw-data")), decreasing = TRUE)[1]))
# Change vector names
lookup <- tibble(
short = c(
"COV_ID",
"COV_REG",
"COV_EW",
"COV_EWG",
"COV_EY",
"COV_GDR",
"COV_AGR",
"COV_OCC",
"COV_ASM",
"COV_OW",
"COV_OY",
"COV_HSP",
"COV_RSV",
"COV_RW",
"COV_RY",
"COV_DTH",
"COV_TRM"
),
long = c(
"Case identifier number",
"Region",
"Episode week",
"Episode week group",
"Episode year",
"Gender",
"Age group",
"Occupation",
"Asymptomatic",
"Onset week of symptoms",
"Onset year of symptoms",
"Hospital status",
"Recovered",
"Resolution week",
"Resolution year",
"Death",
"Transmission"
)
)
names(d) <- sapply(names(d), function(x) {
if(x %in% lookup$short) {
output <- lookup$long[lookup$short == x]
} else {
output <- x
}
})
# Wrangle data
new_snapshot <- wrangle_data(d)
# Convert `Episode Date` to date object
new_snapshot$`Episode date` <- as.Date(new_snapshot$`Episode date`, "%d-%b-%y")
# Create aggregate data
aggregate_data <- aggregate(
new_snapshot$`Case identifier number`,
list(
new_snapshot$`Episode date`,
new_snapshot$`Age group`,
new_snapshot$Gender,
new_snapshot$Region,
new_snapshot$Occupation,
new_snapshot$`Hospital status`,
new_snapshot$Death,
new_snapshot$Transmission
),
length
)
# Update names in aggregate_data
names(aggregate_data) <- c(
"Episode date",
"Age group",
"Gender",
"Region",
"Occupation",
"Hospital status",
"Death",
"Transmission",
"Counts"
)
# Convert factors to characters
aggregate_data[-c(1, ncol(aggregate_data))] <- lapply(aggregate_data[-c(1, ncol(aggregate_data))], as.character)
# Export data
saveRDS(aggregate_data, paste0("c:/users/joelb/onedrive/github/covid19/data/aggregate-data-", Sys.Date() ,".Rdata"), compress = "xz")
shiny::runApp('C:/Users/joelb/OneDrive/GitHub/covid19')
