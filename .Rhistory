runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
runApp()
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
data(mtcars)
str(mtcars)
mtcars$f <- "joel"
which(names(mtcars) %in% class("numeric"))
class(names(mtcars))
lapply(names(mtcars), class)
unlist(lapply(names(mtcars), class))
unlist(lapply(names(mtcars), function(x) class(mtcars[x])))
unlist(lapply(names(mtcars), function(x) class(as.vector(mtcars[x]))))
unlist(lapply(names(mtcars), is.numeric))
unlist(lapply(names(mtcars), is.numeric))
str(mtcars)
unlist(lapply(mtcars, is.numeric))
str(unlist(lapply(mtcars, is.numeric)))
names(unlist(lapply(mtcars, is.numeric)))
unname(unlist(lapply(mtcars, is.numeric)))
mtcards[which(unname(unlist(lapply(mtcars, is.numeric))))]
mtcars[which(unname(unlist(lapply(mtcars, is.numeric))))]
names(mtcars)[which(unname(unlist(lapply(mtcars, is.numeric))))]
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
runApp('C:/Users/joelb/OneDrive/GitHub/excel-viewer')
a = "_joel"
substr(a, 1, 1)
substr(a, 1, 1) == "_"
sub("^[_]", "9", a)
gsub("^[_]", "9", a)
gsub("^_", "9", a)
gsub("_$", "9", a)
a = "_joel_"
gsub("_$", "9", a)
gsub("^_|_$", "9", a)
# Load packages to extend base R
library("openxlsx")
# Import data
d <- read.xlsx("c:/users/joelb/onedrive/github/csta/r/data/Seed Exports by Country - July-June Crop Year 2020-2021.xlsx")
# Examine the data
str(d)
201617-201516
201718-201617
# Add column names
colnames(d) <- c("hs_code", "country", "d201617", "d201718", "d201819", "d201920", "d202021", "q201617", "q201718", "q201819", "q201920", "q202021")
# Remove top 3 rows
d <- d[4:nrow(d),]
View(d)
# Subset data to the columns of interest
d2 <- d[c("hs_code", "country", "d202021", "q202021")]
View(d2)
# Exclude rows where the country value is "Country" or NA
sort(unique(d2$country))
d2 <- d2[d2$country != "Country" & ! is.na(d2$country) & d2$country != "",]
# Clean up any country values that are irregular
unique(d2$country)
d2$country <- gsub("\n", "", d2$country)
d2$country <- gsub("CÃ´te d'Ivoire|United States of America", "Ivory Coast|United States", d2$country)
# Convert dollar and quantity columns to numerics
d2$d202021 <- sapply(d2$d202021, function(x) as.numeric(gsub(",", "", x)))
d2$q202021 <- sapply(d2$q202021, function(x) as.numeric(gsub(",", "", x)))
# Fill in empty hs_code rows
for(i in 1:nrow(d2)) {
if(is.na(d2$hs_code[i]) | d2$hs_code[i] == "") {
d2$hs_code[i] <- current_hs_code
} else {
current_hs_code <- d2$hs_code[i]
}
}
# Look for irregular hs_codes and remove rows
sort(unique(d2$hs_code))
d2 <- d2[d2$hs_code != "Total for codes reported by Kilogram" & d2$hs_code != "Total for codes reported by Metric Ton" & d2$hs_code != "Total",]
# Convert quantities in metric tonnes to kilograms
d2$q202021 <- apply(d2[c("hs_code", "q202021")], 1, function(x) if(sum(grepl("Metric Ton", x[1])) == 1 & x[2] > 0) x[2] * 1000 else x[2])
# Isolate the number within the hs_code
d2$hs_code <- sapply(d2$hs_code, function(x) if(x != "") trimws(strsplit(x, "-")[[1]][1])  else x)
# Compare HS codes to current list
current_hs_codes <- read.csv("c:/users/joelb/onedrive/github/csta/R/data/hs codes - export - 20210101.csv", colClasses = "character")
unique(d2$hs_code) %in% current_hs_codes$hs_code
current_hs_codes$hs_code %in% unique(d2$hs_code)
# HS codes not in current list
d2$hs_code[which(! unique(d2$hs_code) %in% current_hs_codes$hs_code)]
# Create crop kind variable
d2$crop_kind <- substring(d2$hs_code, 1, 5)
d2$crop_kind <- sapply(d2$crop_kind, function(x) if(x == "12091" | x == "12092") "12091/12092" else if(x == "12093" | x == "12099") x else substring(x, 1, 4))
# Create trade_type variable
d2$trade_type <- rep("export", nrow(d2))
# Convert data to MySQL format
dollars <- cbind(d2[c("trade_type", "crop_kind", "hs_code", "country")], meta_key = rep("d202021", nrow(d2)), meta_value = trimws(d2$d202021))
quantities <- cbind(d2[c("trade_type", "crop_kind", "hs_code", "country")], meta_key = rep("q202021", nrow(d2)), meta_value = trimws(d2$q202021))
# Export data
d3 <- rbind(dollars, quantities)
d4 <- as.data.frame(unname(apply(d3, 1, function(x) paste("(", "'", x[1], "'", ",", "'", x[2], "'", ",", "'", x[3], "'", ",", "'", x[4], "'", ",", "'", x[5], "'", ",", "'", x[6], "'", "),", sep = ""))))
write.table(d4, "c:/users/joelb/onedrive/github/csta/R/exports202021.txt", row.names = FALSE, na = "")
# Load packages to extend base R
library("openxlsx")
# Import data
d <- read.xlsx("c:/users/joelb/onedrive/github/csta/r/data/Seed Imports by Country - July-June Crop Year 2020-2021.xlsx")
# Examine the data
str(d)
# Add column names
colnames(d) <- c("hs_code", "country", "d201617", "d201718", "d201819", "d201920", "d202021", "q201617", "q201718", "q201819", "q201920", "q202021")
# Remove top 3 rows
d <- d[4:nrow(d),]
View(d)
# Subset data to the columns of interest
d2 <- d[c("hs_code", "country", "d202021", "q202021")]
# Exclude rows where the country value is "Country" or NA
sort(unique(d2$country))
d2 <- d2[d2$country != "Country" & ! is.na(d2$country) & d2$country != "",]
# Clean up any country values that are irregular
unique(d2$country)
d2$country <- gsub("\n", "", d2$country)
d2$country <- gsub("CÃ´te d'Ivoire|United States of America", "Ivory Coast|United States", d2$country)
# Convert dollar and quantity columns to numerics
d2$d202021 <- sapply(d2$d202021, function(x) as.numeric(gsub(",", "", x)))
d2$q202021 <- sapply(d2$q202021, function(x) as.numeric(gsub(",", "", x)))
# Fill in empty hs_code rows
for(i in 1:nrow(d2)) {
if(is.na(d2$hs_code[i]) | d2$hs_code[i] == "") {
d2$hs_code[i] <- current_hs_code
} else {
current_hs_code <- d2$hs_code[i]
}
}
# Look for irregular hs_codes and remove rows
sort(unique(d2$hs_code))
d2 <- d2[d2$hs_code != "Total for codes reported by Kilogram" & d2$hs_code != "Total for codes reported by Metric Ton" & d2$hs_code != "Total",]
# Convert quantities in metric tonnes to kilograms
d2$q202021 <- apply(d2[c("hs_code", "q202021")], 1, function(x) if(sum(grepl("Metric Ton", x[1])) == 1 & x[2] > 0) x[2] * 1000 else x[2])
# Isolate the number within the hs_code
d2$hs_code <- sapply(d2$hs_code, function(x) if(x != "") trimws(strsplit(x, "-")[[1]][1])  else x)
# Compare HS codes to current list
current_hs_codes <- read.csv("c:/users/joelb/onedrive/github/csta/R/data/hs codes - import - 20210101.csv", colClasses = "character")
unique(d2$hs_code) %in% current_hs_codes$hs_code
current_hs_codes$hs_code %in% unique(d2$hs_code)
# HS codes not in current list (vegetable seeds)
d2$hs_code[which(! unique(d2$hs_code) %in% current_hs_codes$hs_code)]
# Create crop kind variable
d2$crop_kind <- substring(d2$hs_code, 1, 5)
d2$crop_kind <- sapply(d2$crop_kind, function(x) if(x == "12091" | x == "12092") "12091/12092" else if(x == "12093" | x == "12099") x else substring(x, 1, 4))
# Create trade_type variable
d2$trade_type <- rep("import", nrow(d2))
# Convert data to MySQL format
dollars <- cbind(d2[c("trade_type", "crop_kind", "hs_code", "country")], meta_key = rep("d202021", nrow(d2)), meta_value = trimws(d2$d202021))
quantities <- cbind(d2[c("trade_type", "crop_kind", "hs_code", "country")], meta_key = rep("q202021", nrow(d2)), meta_value = trimws(d2$q202021))
# Export data
d3 <- rbind(dollars, quantities)
d4 <- as.data.frame(unname(apply(d3, 1, function(x) paste("(", "'", x[1], "'", ",", "'", x[2], "'", ",", "'", x[3], "'", ",", "'", x[4], "'", ",", "'", x[5], "'", ",", "'", x[6], "'", "),", sep = ""))))
write.table(d4, "c:/users/joelb/onedrive/github/csta/R/imports202021.txt", row.names = FALSE, na = "")
# Load dependencies
library(cansim); library(plyr); library(dplyr); library(stringr); library(readr); library(tidyr)
# Helper functions
# Wrangle the raw data
wrangle_data <- function(d) {
d_wide <- d %>% filter(`Episode week` != 99)
# Add leading zeros to Case Identifier Number
d_wide$`Case identifier number` <- str_pad(d_wide$`Case identifier number`, width = nchar(max(as.numeric(d$`Case identifier number`))), pad = "0")
# Identify select vectors
vectors_to_factor <- c("Age group", "Gender", "Region", "Occupation", "Asymptomatic", "Transmission", "Hospital status", "Recovered", "Death")
# Restructure as factors
d_wide[vectors_to_factor] <- lapply(d_wide[vectors_to_factor], factor)
# Add semantic labels
d_wide$`Age group` <- revalue(d_wide$`Age group`, c("1" = "0-19", "2" = "20-29", "3" = "30-39", "4" = "40-49", "5" = "50-59", "6" = "60-69", "7" = "70-79", "8" = "80+", "99" = "Not stated"), warn_missing = FALSE)
d_wide$Gender <- revalue(d_wide$Gender, c("1" = "Male", "2" = "Female", "3" = "Non-binary", "7" = "Non-binary", "9" = "Not stated"), warn_missing = FALSE)
d_wide$Region <- revalue(d_wide$Region, c("1" = "Atlantic", "2" = "Quebec", "3" = "Ontario and Nunavut", "4" = "Prairies and the Northwest Territories", "5" = "British Columbia and Yukon"), warn_missing = FALSE)
d_wide$Occupation <- revalue(d_wide$Occupation, c("1" = "Health care worker", "2" = "School or daycare worker/attendee", "3" = "Long term care resident", "4" = "Other", "9" = "Not stated"), warn_missing = FALSE)
d_wide$Asymptomatic <- revalue(d_wide$Asymptomatic, c("1" = "Yes", "2" = "No", "9" = "Not stated"), warn_missing = FALSE)
d_wide$Transmission <- revalue(d_wide$Transmission, c("1" = "Domestic acquisition", "2" = "International travel", "9" = "Not stated"), warn_missing = FALSE)
d_wide$`Hospital status` <- revalue(d_wide$`Hospital status`, c("1" = "Hospitalized and in intensive care unit", "2" = "Hospitalized, but not in intensive care unit", "3" = "Not hospitalized", "9" = "Not stated/unknown"), warn_missing = FALSE)
d_wide$Recovered <- revalue(d_wide$Recovered, c("1" = "Yes", "2" = "No", "9" = "Not stated"), warn_missing = FALSE)
d_wide$Death <- revalue(d_wide$Death, c("1" = "Yes", "2" = "No", "9" = "Not stated"), warn_missing = FALSE)
# Add day (select first day of the week since not given), month and reference year vectors together and structure as a date object
d_wide$`Episode date` <- as.Date(paste(paste0("20", d_wide$`Episode year`), str_pad(d_wide$`Episode week`, width = 2, pad = 0), 1, sep = "-"), "%Y-%U-%u")
# Change format to %d-%b-%y
#d_wide$`Episode date` <- strftime(d_wide$`Episode date`, format = "%d-%b-%y")
# Remove unwanted vectors from data
d_wide <- d_wide %>% select("Case identifier number", "Episode date", Gender, "Age group", "Region", "Occupation", Asymptomatic, Transmission, "Hospital status", Recovered, Death)
# Order data by case ids in ascending order
d_wide <- d_wide %>% arrange(`Case identifier number`)
return(d_wide)
}
# Set working directory
setwd("c:/users/joelb/onedrive/github/covid19")
paste0(getwd(), "/raw-data/", sort(list.files(paste0(getwd(), "/raw-data")), decreasing = TRUE)[1])
paste0(getwd(), "/raw-data/", sort(list.files(paste0(getwd(), "/raw-data", pattern = ".csv")), decreasing = TRUE)[1])
paste0(getwd(), "/raw-data/", sort(list.files(paste0(getwd(), "/raw-data"), pattern = ".csv"), decreasing = TRUE)[1])
# Import data
d <- read_csv(paste0(getwd(), "/raw-data/", sort(list.files(paste0(getwd(), "/raw-data"), pattern = ".csv"), decreasing = TRUE)[1]))
# Change vector names
lookup <- tibble(
short = c(
"COV_ID",
"COV_REG",
"COV_EW",
"COV_EWG",
"COV_EY",
"COV_GDR",
"COV_AGR",
"COV_OCC",
"COV_ASM",
"COV_OW",
"COV_OY",
"COV_HSP",
"COV_RSV",
"COV_RW",
"COV_RY",
"COV_DTH",
"COV_TRM"
),
long = c(
"Case identifier number",
"Region",
"Episode week",
"Episode week group",
"Episode year",
"Gender",
"Age group",
"Occupation",
"Asymptomatic",
"Onset week of symptoms",
"Onset year of symptoms",
"Hospital status",
"Recovered",
"Resolution week",
"Resolution year",
"Death",
"Transmission"
)
)
names(d) <- sapply(names(d), function(x) {
if(x %in% lookup$short) {
output <- lookup$long[lookup$short == x]
} else {
output <- x
}
})
# Wrangle data
new_snapshot <- wrangle_data(d)
# Import data
d <- read_csv(paste0(getwd(), "/raw-data/", sort(list.files(paste0(getwd(), "/raw-data"), pattern = ".csv"), decreasing = TRUE)[1]))
names(d)
# Change vector names
lookup <- tibble(
short = c(
"COV_ID",
"COV_REG",
"COV_EW",
"COV_EWG",
"COV_EY",
"COV_GDR",
"COV_AGR",
"COV_OCC",
"COV_ASM",
"COV_OW",
"COV_OY",
"COV_HSP",
"COV_RSV",
"COV_RW",
"COV_RY",
"COV_DTH",
"COV_TRM"
),
long = c(
"Case identifier number",
"Region",
"Episode week",
"Episode week group",
"Episode year",
"Gender",
"Age group",
"Occupation",
"Asymptomatic",
"Onset week of symptoms",
"Onset year of symptoms",
"Hospital status",
"Recovered",
"Resolution week",
"Resolution year",
"Death",
"Transmission"
)
)
names(d) <- sapply(names(d), function(x) {
if(x %in% lookup$short) {
output <- lookup$long[lookup$short == x]
} else {
output <- x
}
})
# Helper functions
# Wrangle the raw data
wrangle_data <- function(d) {
d_wide <- d %>% filter(`Episode week` != 99)
# Add leading zeros to Case Identifier Number
d_wide$`Case identifier number` <- str_pad(d_wide$`Case identifier number`, width = nchar(max(as.numeric(d$`Case identifier number`))), pad = "0")
# Identify select vectors
#vectors_to_factor <- c("Age group", "Gender", "Region", "Occupation", "Asymptomatic", "Transmission", "Hospital status", "Recovered", "Death")
vectors_to_factor <- c("Age group", "Gender", "Region", "Occupation", "Asymptomatic", "Transmission", "Hospital status", "Death")
# Restructure as factors
d_wide[vectors_to_factor] <- lapply(d_wide[vectors_to_factor], factor)
# Add semantic labels
d_wide$`Age group` <- revalue(d_wide$`Age group`, c("1" = "0-19", "2" = "20-29", "3" = "30-39", "4" = "40-49", "5" = "50-59", "6" = "60-69", "7" = "70-79", "8" = "80+", "99" = "Not stated"), warn_missing = FALSE)
d_wide$Gender <- revalue(d_wide$Gender, c("1" = "Male", "2" = "Female", "3" = "Non-binary", "7" = "Non-binary", "9" = "Not stated"), warn_missing = FALSE)
d_wide$Region <- revalue(d_wide$Region, c("1" = "Atlantic", "2" = "Quebec", "3" = "Ontario and Nunavut", "4" = "Prairies and the Northwest Territories", "5" = "British Columbia and Yukon"), warn_missing = FALSE)
d_wide$Occupation <- revalue(d_wide$Occupation, c("1" = "Health care worker", "2" = "School or daycare worker/attendee", "3" = "Long term care resident", "4" = "Other", "9" = "Not stated"), warn_missing = FALSE)
d_wide$Asymptomatic <- revalue(d_wide$Asymptomatic, c("1" = "Yes", "2" = "No", "9" = "Not stated"), warn_missing = FALSE)
d_wide$Transmission <- revalue(d_wide$Transmission, c("1" = "Domestic acquisition", "2" = "International travel", "9" = "Not stated"), warn_missing = FALSE)
d_wide$`Hospital status` <- revalue(d_wide$`Hospital status`, c("1" = "Hospitalized and in intensive care unit", "2" = "Hospitalized, but not in intensive care unit", "3" = "Not hospitalized", "9" = "Not stated/unknown"), warn_missing = FALSE)
#d_wide$Recovered <- revalue(d_wide$Recovered, c("1" = "Yes", "2" = "No", "9" = "Not stated"), warn_missing = FALSE)
d_wide$Death <- revalue(d_wide$Death, c("1" = "Yes", "2" = "No", "9" = "Not stated"), warn_missing = FALSE)
# Add day (select first day of the week since not given), month and reference year vectors together and structure as a date object
d_wide$`Episode date` <- as.Date(paste(paste0("20", d_wide$`Episode year`), str_pad(d_wide$`Episode week`, width = 2, pad = 0), 1, sep = "-"), "%Y-%U-%u")
# Change format to %d-%b-%y
#d_wide$`Episode date` <- strftime(d_wide$`Episode date`, format = "%d-%b-%y")
# Remove unwanted vectors from data
d_wide <- d_wide %>% select("Case identifier number", "Episode date", Gender, "Age group", "Region", "Occupation", Asymptomatic, Transmission, "Hospital status", Recovered, Death)
# Order data by case ids in ascending order
d_wide <- d_wide %>% arrange(`Case identifier number`)
return(d_wide)
}
# Set working directory
setwd("c:/users/joelb/onedrive/github/covid19")
# Import data
d <- read_csv(paste0(getwd(), "/raw-data/", sort(list.files(paste0(getwd(), "/raw-data"), pattern = ".csv"), decreasing = TRUE)[1]))
# Change vector names
lookup <- tibble(
short = c(
"COV_ID",
"COV_REG",
"COV_EW",
"COV_EWG",
"COV_EY",
"COV_GDR",
"COV_AGR",
"COV_OCC",
"COV_ASM",
"COV_OW",
"COV_OY",
"COV_HSP",
"COV_RSV",
"COV_RW",
"COV_RY",
"COV_DTH",
"COV_TRM"
),
long = c(
"Case identifier number",
"Region",
"Episode week",
"Episode week group",
"Episode year",
"Gender",
"Age group",
"Occupation",
"Asymptomatic",
"Onset week of symptoms",
"Onset year of symptoms",
"Hospital status",
"Recovered",
"Resolution week",
"Resolution year",
"Death",
"Transmission"
)
)
names(d) <- sapply(names(d), function(x) {
if(x %in% lookup$short) {
output <- lookup$long[lookup$short == x]
} else {
output <- x
}
})
# Wrangle data
new_snapshot <- wrangle_data(d)
# Helper functions
# Wrangle the raw data
wrangle_data <- function(d) {
d_wide <- d %>% filter(`Episode week` != 99)
# Add leading zeros to Case Identifier Number
d_wide$`Case identifier number` <- str_pad(d_wide$`Case identifier number`, width = nchar(max(as.numeric(d$`Case identifier number`))), pad = "0")
# Identify select vectors
#vectors_to_factor <- c("Age group", "Gender", "Region", "Occupation", "Asymptomatic", "Transmission", "Hospital status", "Recovered", "Death")
vectors_to_factor <- c("Age group", "Gender", "Region", "Occupation", "Asymptomatic", "Transmission", "Hospital status", "Death")
# Restructure as factors
d_wide[vectors_to_factor] <- lapply(d_wide[vectors_to_factor], factor)
# Add semantic labels
d_wide$`Age group` <- revalue(d_wide$`Age group`, c("1" = "0-19", "2" = "20-29", "3" = "30-39", "4" = "40-49", "5" = "50-59", "6" = "60-69", "7" = "70-79", "8" = "80+", "99" = "Not stated"), warn_missing = FALSE)
d_wide$Gender <- revalue(d_wide$Gender, c("1" = "Male", "2" = "Female", "3" = "Non-binary", "7" = "Non-binary", "9" = "Not stated"), warn_missing = FALSE)
d_wide$Region <- revalue(d_wide$Region, c("1" = "Atlantic", "2" = "Quebec", "3" = "Ontario and Nunavut", "4" = "Prairies and the Northwest Territories", "5" = "British Columbia and Yukon"), warn_missing = FALSE)
d_wide$Occupation <- revalue(d_wide$Occupation, c("1" = "Health care worker", "2" = "School or daycare worker/attendee", "3" = "Long term care resident", "4" = "Other", "9" = "Not stated"), warn_missing = FALSE)
d_wide$Asymptomatic <- revalue(d_wide$Asymptomatic, c("1" = "Yes", "2" = "No", "9" = "Not stated"), warn_missing = FALSE)
d_wide$Transmission <- revalue(d_wide$Transmission, c("1" = "Domestic acquisition", "2" = "International travel", "9" = "Not stated"), warn_missing = FALSE)
d_wide$`Hospital status` <- revalue(d_wide$`Hospital status`, c("1" = "Hospitalized and in intensive care unit", "2" = "Hospitalized, but not in intensive care unit", "3" = "Not hospitalized", "9" = "Not stated/unknown"), warn_missing = FALSE)
#d_wide$Recovered <- revalue(d_wide$Recovered, c("1" = "Yes", "2" = "No", "9" = "Not stated"), warn_missing = FALSE)
d_wide$Death <- revalue(d_wide$Death, c("1" = "Yes", "2" = "No", "9" = "Not stated"), warn_missing = FALSE)
# Add day (select first day of the week since not given), month and reference year vectors together and structure as a date object
d_wide$`Episode date` <- as.Date(paste(paste0("20", d_wide$`Episode year`), str_pad(d_wide$`Episode week`, width = 2, pad = 0), 1, sep = "-"), "%Y-%U-%u")
# Change format to %d-%b-%y
#d_wide$`Episode date` <- strftime(d_wide$`Episode date`, format = "%d-%b-%y")
# Remove unwanted vectors from data
#d_wide <- d_wide %>% select("Case identifier number", "Episode date", Gender, "Age group", "Region", "Occupation", Asymptomatic, Transmission, "Hospital status", Recovered, Death)
d_wide <- d_wide %>% select("Case identifier number", "Episode date", Gender, "Age group", "Region", "Occupation", Asymptomatic, Transmission, "Hospital status", Death)
# Order data by case ids in ascending order
d_wide <- d_wide %>% arrange(`Case identifier number`)
return(d_wide)
}
# Set working directory
setwd("c:/users/joelb/onedrive/github/covid19")
# Import data
d <- read_csv(paste0(getwd(), "/raw-data/", sort(list.files(paste0(getwd(), "/raw-data"), pattern = ".csv"), decreasing = TRUE)[1]))
# Change vector names
lookup <- tibble(
short = c(
"COV_ID",
"COV_REG",
"COV_EW",
"COV_EWG",
"COV_EY",
"COV_GDR",
"COV_AGR",
"COV_OCC",
"COV_ASM",
"COV_OW",
"COV_OY",
"COV_HSP",
"COV_RSV",
"COV_RW",
"COV_RY",
"COV_DTH",
"COV_TRM"
),
long = c(
"Case identifier number",
"Region",
"Episode week",
"Episode week group",
"Episode year",
"Gender",
"Age group",
"Occupation",
"Asymptomatic",
"Onset week of symptoms",
"Onset year of symptoms",
"Hospital status",
"Recovered",
"Resolution week",
"Resolution year",
"Death",
"Transmission"
)
)
names(d) <- sapply(names(d), function(x) {
if(x %in% lookup$short) {
output <- lookup$long[lookup$short == x]
} else {
output <- x
}
})
# Wrangle data
new_snapshot <- wrangle_data(d)
# Convert `Episode Date` to date object
new_snapshot$`Episode date` <- as.Date(new_snapshot$`Episode date`, "%d-%b-%y")
# Create aggregate data
aggregate_data <- aggregate(
new_snapshot$`Case identifier number`,
list(
new_snapshot$`Episode date`,
new_snapshot$`Age group`,
new_snapshot$Gender,
new_snapshot$Region,
new_snapshot$Occupation,
new_snapshot$`Hospital status`,
new_snapshot$Death,
new_snapshot$Transmission
),
length
)
# Update names in aggregate_data
names(aggregate_data) <- c(
"Episode date",
"Age group",
"Gender",
"Region",
"Occupation",
"Hospital status",
"Death",
"Transmission",
"Counts"
)
# Convert factors to characters
aggregate_data[-c(1, ncol(aggregate_data))] <- lapply(aggregate_data[-c(1, ncol(aggregate_data))], as.character)
# Export data
saveRDS(aggregate_data, paste0("c:/users/joelb/onedrive/github/covid19/data/aggregate-data-", Sys.Date() ,".Rdata"), compress = "xz")
shiny::runApp('C:/Users/joelb/OneDrive/GitHub/covid19')
